
Pr√°ctica_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017d8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001984  08001984  00011984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019a4  080019a4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080019a4  080019a4  000119a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080019ac  080019ac  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019ac  080019ac  000119ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019b0  080019b0  000119b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080019b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0000002c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005034  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012bb  00000000  00000000  00025088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000508  00000000  00000000  00026348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000450  00000000  00000000  00026850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250fd  00000000  00000000  00026ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007d2e  00000000  00000000  0004bd9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1190  00000000  00000000  00053acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134c5b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011b4  00000000  00000000  00134cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800196c 	.word	0x0800196c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	0800196c 	.word	0x0800196c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <delayInit>:
 * @param  delay: pointer to a defined delay structure
 * @param  duration: duration of the delay in ms
 * @retval None
 */
void delayInit( delay_t * delay, tick_t duration)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
	if(delay == NULL || duration > MAX_DELAY) Error_Handler();
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d004      	beq.n	800050a <delayInit+0x1a>
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	f242 7210 	movw	r2, #10000	; 0x2710
 8000506:	4293      	cmp	r3, r2
 8000508:	d901      	bls.n	800050e <delayInit+0x1e>
 800050a:	f000 f844 	bl	8000596 <Error_Handler>
	delay->duration = duration;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	683a      	ldr	r2, [r7, #0]
 8000512:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	721a      	strb	r2, [r3, #8]
	delay->startTime = 0;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
	return;
 8000520:	bf00      	nop
}
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <delayRead>:
 * @brief  Reads the status of the delay timer
 * @param  delay: pointer to a defined delay structure
 * @retval delay ended
 */
bool_t delayRead( delay_t * delay )
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	if(delay == NULL) Error_Handler();
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d101      	bne.n	800053a <delayRead+0x12>
 8000536:	f000 f82e 	bl	8000596 <Error_Handler>
	if(!delay->running)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	7a1b      	ldrb	r3, [r3, #8]
 800053e:	f083 0301 	eor.w	r3, r3, #1
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d009      	beq.n	800055c <delayRead+0x34>
	{
		delay->running = true;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2201      	movs	r2, #1
 800054c:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick();
 800054e:	f000 f971 	bl	8000834 <HAL_GetTick>
 8000552:	4602      	mov	r2, r0
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	601a      	str	r2, [r3, #0]
		return false;
 8000558:	2300      	movs	r3, #0
 800055a:	e018      	b.n	800058e <delayRead+0x66>
	}
	else if(delay->startTime + delay->duration <= HAL_GetTick() && delay->duration < HAL_GetTick())
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	18d4      	adds	r4, r2, r3
 8000566:	f000 f965 	bl	8000834 <HAL_GetTick>
 800056a:	4603      	mov	r3, r0
 800056c:	429c      	cmp	r4, r3
 800056e:	d80d      	bhi.n	800058c <delayRead+0x64>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	685c      	ldr	r4, [r3, #4]
 8000574:	f000 f95e 	bl	8000834 <HAL_GetTick>
 8000578:	4603      	mov	r3, r0
 800057a:	429c      	cmp	r4, r3
 800057c:	d206      	bcs.n	800058c <delayRead+0x64>
	{
		delay->startTime = HAL_GetTick();
 800057e:	f000 f959 	bl	8000834 <HAL_GetTick>
 8000582:	4602      	mov	r2, r0
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	601a      	str	r2, [r3, #0]
		return true;
 8000588:	2301      	movs	r3, #1
 800058a:	e000      	b.n	800058e <delayRead+0x66>
	}
	else return false;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bd90      	pop	{r4, r7, pc}

08000596 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 800059a:	2001      	movs	r0, #1
 800059c:	f000 f852 	bl	8000644 <BSP_LED_On>
	while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0xa>
	...

080005a4 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d10e      	bne.n	80005d2 <BSP_LED_Init+0x2e>
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <BSP_LED_Init+0x94>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005bc:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <BSP_LED_Init+0x94>)
 80005be:	f043 0302 	orr.w	r3, r3, #2
 80005c2:	6313      	str	r3, [r2, #48]	; 0x30
 80005c4:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <BSP_LED_Init+0x94>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	f003 0302 	and.w	r3, r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	e00d      	b.n	80005ee <BSP_LED_Init+0x4a>
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <BSP_LED_Init+0x94>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a17      	ldr	r2, [pc, #92]	; (8000638 <BSP_LED_Init+0x94>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <BSP_LED_Init+0x94>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	4a12      	ldr	r2, [pc, #72]	; (800063c <BSP_LED_Init+0x98>)
 80005f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <BSP_LED_Init+0x9c>)
 8000608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060c:	f107 0214 	add.w	r2, r7, #20
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fa00 	bl	8000a18 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4a09      	ldr	r2, [pc, #36]	; (8000640 <BSP_LED_Init+0x9c>)
 800061c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4a06      	ldr	r2, [pc, #24]	; (800063c <BSP_LED_Init+0x98>)
 8000624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000628:	2200      	movs	r2, #0
 800062a:	4619      	mov	r1, r3
 800062c:	f000 fbb8 	bl	8000da0 <HAL_GPIO_WritePin>
}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	08001984 	.word	0x08001984
 8000640:	20000000 	.word	0x20000000

08000644 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <BSP_LED_On+0x2c>)
 8000652:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <BSP_LED_On+0x30>)
 800065a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065e:	2201      	movs	r2, #1
 8000660:	4619      	mov	r1, r3
 8000662:	f000 fb9d 	bl	8000da0 <HAL_GPIO_WritePin>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000000 	.word	0x20000000
 8000674:	08001984 	.word	0x08001984

08000678 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <BSP_LED_Toggle+0x2c>)
 8000686:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4906      	ldr	r1, [pc, #24]	; (80006a8 <BSP_LED_Toggle+0x30>)
 800068e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000692:	4619      	mov	r1, r3
 8000694:	4610      	mov	r0, r2
 8000696:	f000 fb9c 	bl	8000dd2 <HAL_GPIO_TogglePin>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000000 	.word	0x20000000
 80006a8:	08001984 	.word	0x08001984

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <SystemInit+0x60>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <SystemInit+0x60>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <SystemInit+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <SystemInit+0x64>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <SystemInit+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SystemInit+0x64>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <SystemInit+0x64>)
 80006d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <SystemInit+0x64>)
 80006e4:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <SystemInit+0x68>)
 80006e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <SystemInit+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a08      	ldr	r2, [pc, #32]	; (8000710 <SystemInit+0x64>)
 80006ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <SystemInit+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <SystemInit+0x60>)
 80006fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000700:	609a      	str	r2, [r3, #8]
#endif
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00
 8000710:	40023800 	.word	0x40023800
 8000714:	24003010 	.word	0x24003010

08000718 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800076c:	f000 f84e 	bl	800080c <HAL_IncTick>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_Init+0x34>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <HAL_Init+0x34>)
 800077e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000782:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x34>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x34>)
 800078a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f90d 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f000 fb33 	bl	8000e06 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023c00 	.word	0x40023c00

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f917 	bl	80009fe <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e8:	f000 f8ed 	bl	80009c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000000c 	.word	0x2000000c
 8000804:	20000014 	.word	0x20000014
 8000808:	20000010 	.word	0x20000010

0800080c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x20>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x24>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_IncTick+0x24>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000014 	.word	0x20000014
 8000830:	20000040 	.word	0x20000040

08000834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_GetTick+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000040 	.word	0x20000040

0800084c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	60d3      	str	r3, [r2, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <__NVIC_GetPriorityGrouping+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	f003 0307 	and.w	r3, r3, #7
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	; (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f1c3 0307 	rsb	r3, r3, #7
 800091e:	2b04      	cmp	r3, #4
 8000920:	bf28      	it	cs
 8000922:	2304      	movcs	r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3304      	adds	r3, #4
 800092a:	2b06      	cmp	r3, #6
 800092c:	d902      	bls.n	8000934 <NVIC_EncodePriority+0x30>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3b03      	subs	r3, #3
 8000932:	e000      	b.n	8000936 <NVIC_EncodePriority+0x32>
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43da      	mvns	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	401a      	ands	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43d9      	mvns	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000990:	f7ff ff8e 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff47 	bl	800084c <__NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d8:	f7ff ff5c 	bl	8000894 <__NVIC_GetPriorityGrouping>
 80009dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f7ff ff8e 	bl	8000904 <NVIC_EncodePriority>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff5d 	bl	80008b0 <__NVIC_SetPriority>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffb0 	bl	800096c <SysTick_Config>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
 8000a32:	e177      	b.n	8000d24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a34:	2201      	movs	r2, #1
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	f040 8166 	bne.w	8000d1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d005      	beq.n	8000a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d130      	bne.n	8000acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	68da      	ldr	r2, [r3, #12]
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	091b      	lsrs	r3, r3, #4
 8000ab6:	f003 0201 	and.w	r2, r3, #1
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d017      	beq.n	8000b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	689a      	ldr	r2, [r3, #8]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d123      	bne.n	8000b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	08da      	lsrs	r2, r3, #3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3208      	adds	r2, #8
 8000b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	f003 0307 	and.w	r3, r3, #7
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	220f      	movs	r2, #15
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	691a      	ldr	r2, [r3, #16]
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	08da      	lsrs	r2, r3, #3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3208      	adds	r2, #8
 8000b56:	69b9      	ldr	r1, [r7, #24]
 8000b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	2203      	movs	r2, #3
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0203 	and.w	r2, r3, #3
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f000 80c0 	beq.w	8000d1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b66      	ldr	r3, [pc, #408]	; (8000d3c <HAL_GPIO_Init+0x324>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a65      	ldr	r2, [pc, #404]	; (8000d3c <HAL_GPIO_Init+0x324>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b63      	ldr	r3, [pc, #396]	; (8000d3c <HAL_GPIO_Init+0x324>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bba:	4a61      	ldr	r2, [pc, #388]	; (8000d40 <HAL_GPIO_Init+0x328>)
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a58      	ldr	r2, [pc, #352]	; (8000d44 <HAL_GPIO_Init+0x32c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d037      	beq.n	8000c56 <HAL_GPIO_Init+0x23e>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a57      	ldr	r2, [pc, #348]	; (8000d48 <HAL_GPIO_Init+0x330>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d031      	beq.n	8000c52 <HAL_GPIO_Init+0x23a>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a56      	ldr	r2, [pc, #344]	; (8000d4c <HAL_GPIO_Init+0x334>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d02b      	beq.n	8000c4e <HAL_GPIO_Init+0x236>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a55      	ldr	r2, [pc, #340]	; (8000d50 <HAL_GPIO_Init+0x338>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d025      	beq.n	8000c4a <HAL_GPIO_Init+0x232>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a54      	ldr	r2, [pc, #336]	; (8000d54 <HAL_GPIO_Init+0x33c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d01f      	beq.n	8000c46 <HAL_GPIO_Init+0x22e>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a53      	ldr	r2, [pc, #332]	; (8000d58 <HAL_GPIO_Init+0x340>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d019      	beq.n	8000c42 <HAL_GPIO_Init+0x22a>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a52      	ldr	r2, [pc, #328]	; (8000d5c <HAL_GPIO_Init+0x344>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d013      	beq.n	8000c3e <HAL_GPIO_Init+0x226>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a51      	ldr	r2, [pc, #324]	; (8000d60 <HAL_GPIO_Init+0x348>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d00d      	beq.n	8000c3a <HAL_GPIO_Init+0x222>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a50      	ldr	r2, [pc, #320]	; (8000d64 <HAL_GPIO_Init+0x34c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d007      	beq.n	8000c36 <HAL_GPIO_Init+0x21e>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a4f      	ldr	r2, [pc, #316]	; (8000d68 <HAL_GPIO_Init+0x350>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_GPIO_Init+0x21a>
 8000c2e:	2309      	movs	r3, #9
 8000c30:	e012      	b.n	8000c58 <HAL_GPIO_Init+0x240>
 8000c32:	230a      	movs	r3, #10
 8000c34:	e010      	b.n	8000c58 <HAL_GPIO_Init+0x240>
 8000c36:	2308      	movs	r3, #8
 8000c38:	e00e      	b.n	8000c58 <HAL_GPIO_Init+0x240>
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	e00c      	b.n	8000c58 <HAL_GPIO_Init+0x240>
 8000c3e:	2306      	movs	r3, #6
 8000c40:	e00a      	b.n	8000c58 <HAL_GPIO_Init+0x240>
 8000c42:	2305      	movs	r3, #5
 8000c44:	e008      	b.n	8000c58 <HAL_GPIO_Init+0x240>
 8000c46:	2304      	movs	r3, #4
 8000c48:	e006      	b.n	8000c58 <HAL_GPIO_Init+0x240>
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e004      	b.n	8000c58 <HAL_GPIO_Init+0x240>
 8000c4e:	2302      	movs	r3, #2
 8000c50:	e002      	b.n	8000c58 <HAL_GPIO_Init+0x240>
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <HAL_GPIO_Init+0x240>
 8000c56:	2300      	movs	r3, #0
 8000c58:	69fa      	ldr	r2, [r7, #28]
 8000c5a:	f002 0203 	and.w	r2, r2, #3
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	4093      	lsls	r3, r2
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c68:	4935      	ldr	r1, [pc, #212]	; (8000d40 <HAL_GPIO_Init+0x328>)
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	3302      	adds	r3, #2
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c76:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <HAL_GPIO_Init+0x354>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4013      	ands	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c9a:	4a34      	ldr	r2, [pc, #208]	; (8000d6c <HAL_GPIO_Init+0x354>)
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ca0:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <HAL_GPIO_Init+0x354>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000cc4:	4a29      	ldr	r2, [pc, #164]	; (8000d6c <HAL_GPIO_Init+0x354>)
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <HAL_GPIO_Init+0x354>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cee:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <HAL_GPIO_Init+0x354>)
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_GPIO_Init+0x354>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <HAL_GPIO_Init+0x354>)
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3301      	adds	r3, #1
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	f67f ae84 	bls.w	8000a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3724      	adds	r7, #36	; 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40013800 	.word	0x40013800
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020c00 	.word	0x40020c00
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40021400 	.word	0x40021400
 8000d5c:	40021800 	.word	0x40021800
 8000d60:	40021c00 	.word	0x40021c00
 8000d64:	40022000 	.word	0x40022000
 8000d68:	40022400 	.word	0x40022400
 8000d6c:	40013c00 	.word	0x40013c00

08000d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	691a      	ldr	r2, [r3, #16]
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e001      	b.n	8000d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
 8000dac:	4613      	mov	r3, r2
 8000dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db0:	787b      	ldrb	r3, [r7, #1]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000dbc:	e003      	b.n	8000dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	041a      	lsls	r2, r3, #16
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	619a      	str	r2, [r3, #24]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b085      	sub	sp, #20
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000de4:	887a      	ldrh	r2, [r7, #2]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4013      	ands	r3, r2
 8000dea:	041a      	lsls	r2, r3, #16
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	400b      	ands	r3, r1
 8000df4:	431a      	orrs	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	619a      	str	r2, [r3, #24]
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <HAL_PWREx_EnableOverDrive+0x90>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_PWREx_EnableOverDrive+0x90>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_PWREx_EnableOverDrive+0x90>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <HAL_PWREx_EnableOverDrive+0x94>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e40:	f7ff fcf8 	bl	8000834 <HAL_GetTick>
 8000e44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e46:	e009      	b.n	8000e5c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e48:	f7ff fcf4 	bl	8000834 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e56:	d901      	bls.n	8000e5c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e01f      	b.n	8000e9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_PWREx_EnableOverDrive+0x98>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e68:	d1ee      	bne.n	8000e48 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e70:	f7ff fce0 	bl	8000834 <HAL_GetTick>
 8000e74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e76:	e009      	b.n	8000e8c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e78:	f7ff fcdc 	bl	8000834 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e86:	d901      	bls.n	8000e8c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e007      	b.n	8000e9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <HAL_PWREx_EnableOverDrive+0x98>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e98:	d1ee      	bne.n	8000e78 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	420e0040 	.word	0x420e0040
 8000eac:	40007000 	.word	0x40007000
 8000eb0:	420e0044 	.word	0x420e0044

08000eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e267      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d075      	beq.n	8000fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ed2:	4b88      	ldr	r3, [pc, #544]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d00c      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ede:	4b85      	ldr	r3, [pc, #532]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d112      	bne.n	8000f10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eea:	4b82      	ldr	r3, [pc, #520]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ef6:	d10b      	bne.n	8000f10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef8:	4b7e      	ldr	r3, [pc, #504]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d05b      	beq.n	8000fbc <HAL_RCC_OscConfig+0x108>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d157      	bne.n	8000fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e242      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f18:	d106      	bne.n	8000f28 <HAL_RCC_OscConfig+0x74>
 8000f1a:	4b76      	ldr	r3, [pc, #472]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a75      	ldr	r2, [pc, #468]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e01d      	b.n	8000f64 <HAL_RCC_OscConfig+0xb0>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f30:	d10c      	bne.n	8000f4c <HAL_RCC_OscConfig+0x98>
 8000f32:	4b70      	ldr	r3, [pc, #448]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a6f      	ldr	r2, [pc, #444]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	4b6d      	ldr	r3, [pc, #436]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a6c      	ldr	r2, [pc, #432]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e00b      	b.n	8000f64 <HAL_RCC_OscConfig+0xb0>
 8000f4c:	4b69      	ldr	r3, [pc, #420]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a68      	ldr	r2, [pc, #416]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b66      	ldr	r3, [pc, #408]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a65      	ldr	r2, [pc, #404]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d013      	beq.n	8000f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fc62 	bl	8000834 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f74:	f7ff fc5e 	bl	8000834 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e207      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f86:	4b5b      	ldr	r3, [pc, #364]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0xc0>
 8000f92:	e014      	b.n	8000fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fc4e 	bl	8000834 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fc4a 	bl	8000834 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	; 0x64
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e1f3      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fae:	4b51      	ldr	r3, [pc, #324]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0xe8>
 8000fba:	e000      	b.n	8000fbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d063      	beq.n	8001092 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fca:	4b4a      	ldr	r3, [pc, #296]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00b      	beq.n	8000fee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fd6:	4b47      	ldr	r3, [pc, #284]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d11c      	bne.n	800101c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d116      	bne.n	800101c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fee:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <HAL_RCC_OscConfig+0x152>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d001      	beq.n	8001006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e1c7      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001006:	4b3b      	ldr	r3, [pc, #236]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4937      	ldr	r1, [pc, #220]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8001016:	4313      	orrs	r3, r2
 8001018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101a:	e03a      	b.n	8001092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d020      	beq.n	8001066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001024:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <HAL_RCC_OscConfig+0x244>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102a:	f7ff fc03 	bl	8000834 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001032:	f7ff fbff 	bl	8000834 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e1a8      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4925      	ldr	r1, [pc, #148]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
 8001064:	e015      	b.n	8001092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_RCC_OscConfig+0x244>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106c:	f7ff fbe2 	bl	8000834 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001074:	f7ff fbde 	bl	8000834 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e187      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d036      	beq.n	800110c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d016      	beq.n	80010d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_RCC_OscConfig+0x248>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ac:	f7ff fbc2 	bl	8000834 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b4:	f7ff fbbe 	bl	8000834 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e167      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_RCC_OscConfig+0x240>)
 80010c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0x200>
 80010d2:	e01b      	b.n	800110c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_RCC_OscConfig+0x248>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010da:	f7ff fbab 	bl	8000834 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e0:	e00e      	b.n	8001100 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e2:	f7ff fba7 	bl	8000834 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d907      	bls.n	8001100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e150      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
 80010f4:	40023800 	.word	0x40023800
 80010f8:	42470000 	.word	0x42470000
 80010fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	4b88      	ldr	r3, [pc, #544]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1ea      	bne.n	80010e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 8097 	beq.w	8001248 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111e:	4b81      	ldr	r3, [pc, #516]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10f      	bne.n	800114a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b7d      	ldr	r3, [pc, #500]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a7c      	ldr	r2, [pc, #496]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b7a      	ldr	r3, [pc, #488]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001146:	2301      	movs	r3, #1
 8001148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114a:	4b77      	ldr	r3, [pc, #476]	; (8001328 <HAL_RCC_OscConfig+0x474>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d118      	bne.n	8001188 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001156:	4b74      	ldr	r3, [pc, #464]	; (8001328 <HAL_RCC_OscConfig+0x474>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a73      	ldr	r2, [pc, #460]	; (8001328 <HAL_RCC_OscConfig+0x474>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fb67 	bl	8000834 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116a:	f7ff fb63 	bl	8000834 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e10c      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	4b6a      	ldr	r3, [pc, #424]	; (8001328 <HAL_RCC_OscConfig+0x474>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x2ea>
 8001190:	4b64      	ldr	r3, [pc, #400]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001194:	4a63      	ldr	r2, [pc, #396]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6713      	str	r3, [r2, #112]	; 0x70
 800119c:	e01c      	b.n	80011d8 <HAL_RCC_OscConfig+0x324>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x30c>
 80011a6:	4b5f      	ldr	r3, [pc, #380]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011aa:	4a5e      	ldr	r2, [pc, #376]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6713      	str	r3, [r2, #112]	; 0x70
 80011b2:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b6:	4a5b      	ldr	r2, [pc, #364]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6713      	str	r3, [r2, #112]	; 0x70
 80011be:	e00b      	b.n	80011d8 <HAL_RCC_OscConfig+0x324>
 80011c0:	4b58      	ldr	r3, [pc, #352]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c4:	4a57      	ldr	r2, [pc, #348]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	6713      	str	r3, [r2, #112]	; 0x70
 80011cc:	4b55      	ldr	r3, [pc, #340]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d0:	4a54      	ldr	r2, [pc, #336]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80011d2:	f023 0304 	bic.w	r3, r3, #4
 80011d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d015      	beq.n	800120c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e0:	f7ff fb28 	bl	8000834 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e6:	e00a      	b.n	80011fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e8:	f7ff fb24 	bl	8000834 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e0cb      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fe:	4b49      	ldr	r3, [pc, #292]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0ee      	beq.n	80011e8 <HAL_RCC_OscConfig+0x334>
 800120a:	e014      	b.n	8001236 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120c:	f7ff fb12 	bl	8000834 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001212:	e00a      	b.n	800122a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7ff fb0e 	bl	8000834 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001222:	4293      	cmp	r3, r2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e0b5      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800122a:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 800122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1ee      	bne.n	8001214 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d105      	bne.n	8001248 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800123c:	4b39      	ldr	r3, [pc, #228]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a38      	ldr	r2, [pc, #224]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80a1 	beq.w	8001394 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b08      	cmp	r3, #8
 800125c:	d05c      	beq.n	8001318 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d141      	bne.n	80012ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001266:	4b31      	ldr	r3, [pc, #196]	; (800132c <HAL_RCC_OscConfig+0x478>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fae2 	bl	8000834 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff fade 	bl	8000834 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e087      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69da      	ldr	r2, [r3, #28]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	019b      	lsls	r3, r3, #6
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a8:	085b      	lsrs	r3, r3, #1
 80012aa:	3b01      	subs	r3, #1
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	061b      	lsls	r3, r3, #24
 80012b6:	491b      	ldr	r1, [pc, #108]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_RCC_OscConfig+0x478>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fab7 	bl	8000834 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ca:	f7ff fab3 	bl	8000834 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e05c      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x416>
 80012e8:	e054      	b.n	8001394 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_RCC_OscConfig+0x478>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff faa0 	bl	8000834 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f8:	f7ff fa9c 	bl	8000834 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e045      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_RCC_OscConfig+0x470>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x444>
 8001316:	e03d      	b.n	8001394 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d107      	bne.n	8001330 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e038      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000
 800132c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_RCC_OscConfig+0x4ec>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d028      	beq.n	8001390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001348:	429a      	cmp	r2, r3
 800134a:	d121      	bne.n	8001390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001356:	429a      	cmp	r2, r3
 8001358:	d11a      	bne.n	8001390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001360:	4013      	ands	r3, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001366:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001368:	4293      	cmp	r3, r2
 800136a:	d111      	bne.n	8001390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001376:	085b      	lsrs	r3, r3, #1
 8001378:	3b01      	subs	r3, #1
 800137a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800137c:	429a      	cmp	r2, r3
 800137e:	d107      	bne.n	8001390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0cc      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b8:	4b68      	ldr	r3, [pc, #416]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d90c      	bls.n	80013e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b65      	ldr	r3, [pc, #404]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0b8      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a58      	ldr	r2, [pc, #352]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800141a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	494d      	ldr	r1, [pc, #308]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	4313      	orrs	r3, r2
 800142c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d044      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d119      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e07f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d003      	beq.n	8001462 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145e:	2b03      	cmp	r3, #3
 8001460:	d107      	bne.n	8001472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e06f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e067      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001482:	4b37      	ldr	r3, [pc, #220]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f023 0203 	bic.w	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4934      	ldr	r1, [pc, #208]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	4313      	orrs	r3, r2
 8001492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001494:	f7ff f9ce 	bl	8000834 <HAL_GetTick>
 8001498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	e00a      	b.n	80014b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149c:	f7ff f9ca 	bl	8000834 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e04f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 020c 	and.w	r2, r3, #12
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d1eb      	bne.n	800149c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 030f 	and.w	r3, r3, #15
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d20c      	bcs.n	80014ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e032      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4916      	ldr	r1, [pc, #88]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800152a:	f000 f821 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 800152e:	4602      	mov	r2, r0
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	490a      	ldr	r1, [pc, #40]	; (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	5ccb      	ldrb	r3, [r1, r3]
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_ClockConfig+0x1c8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f92e 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00
 8001560:	40023800 	.word	0x40023800
 8001564:	0800198c 	.word	0x0800198c
 8001568:	2000000c 	.word	0x2000000c
 800156c:	20000010 	.word	0x20000010

08001570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001574:	b094      	sub	sp, #80	; 0x50
 8001576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
 800157c:	2300      	movs	r3, #0
 800157e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001580:	2300      	movs	r3, #0
 8001582:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001588:	4b79      	ldr	r3, [pc, #484]	; (8001770 <HAL_RCC_GetSysClockFreq+0x200>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b08      	cmp	r3, #8
 8001592:	d00d      	beq.n	80015b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001594:	2b08      	cmp	r3, #8
 8001596:	f200 80e1 	bhi.w	800175c <HAL_RCC_GetSysClockFreq+0x1ec>
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <HAL_RCC_GetSysClockFreq+0x34>
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d003      	beq.n	80015aa <HAL_RCC_GetSysClockFreq+0x3a>
 80015a2:	e0db      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015a4:	4b73      	ldr	r3, [pc, #460]	; (8001774 <HAL_RCC_GetSysClockFreq+0x204>)
 80015a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80015a8:	e0db      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015aa:	4b73      	ldr	r3, [pc, #460]	; (8001778 <HAL_RCC_GetSysClockFreq+0x208>)
 80015ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80015ae:	e0d8      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b0:	4b6f      	ldr	r3, [pc, #444]	; (8001770 <HAL_RCC_GetSysClockFreq+0x200>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ba:	4b6d      	ldr	r3, [pc, #436]	; (8001770 <HAL_RCC_GetSysClockFreq+0x200>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d063      	beq.n	800168e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c6:	4b6a      	ldr	r3, [pc, #424]	; (8001770 <HAL_RCC_GetSysClockFreq+0x200>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	099b      	lsrs	r3, r3, #6
 80015cc:	2200      	movs	r2, #0
 80015ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80015d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80015d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
 80015da:	2300      	movs	r3, #0
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
 80015de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80015e2:	4622      	mov	r2, r4
 80015e4:	462b      	mov	r3, r5
 80015e6:	f04f 0000 	mov.w	r0, #0
 80015ea:	f04f 0100 	mov.w	r1, #0
 80015ee:	0159      	lsls	r1, r3, #5
 80015f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015f4:	0150      	lsls	r0, r2, #5
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4621      	mov	r1, r4
 80015fc:	1a51      	subs	r1, r2, r1
 80015fe:	6139      	str	r1, [r7, #16]
 8001600:	4629      	mov	r1, r5
 8001602:	eb63 0301 	sbc.w	r3, r3, r1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001614:	4659      	mov	r1, fp
 8001616:	018b      	lsls	r3, r1, #6
 8001618:	4651      	mov	r1, sl
 800161a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800161e:	4651      	mov	r1, sl
 8001620:	018a      	lsls	r2, r1, #6
 8001622:	4651      	mov	r1, sl
 8001624:	ebb2 0801 	subs.w	r8, r2, r1
 8001628:	4659      	mov	r1, fp
 800162a:	eb63 0901 	sbc.w	r9, r3, r1
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800163a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800163e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001642:	4690      	mov	r8, r2
 8001644:	4699      	mov	r9, r3
 8001646:	4623      	mov	r3, r4
 8001648:	eb18 0303 	adds.w	r3, r8, r3
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	462b      	mov	r3, r5
 8001650:	eb49 0303 	adc.w	r3, r9, r3
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001662:	4629      	mov	r1, r5
 8001664:	024b      	lsls	r3, r1, #9
 8001666:	4621      	mov	r1, r4
 8001668:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800166c:	4621      	mov	r1, r4
 800166e:	024a      	lsls	r2, r1, #9
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001676:	2200      	movs	r2, #0
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
 800167a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800167c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001680:	f7fe fdb4 	bl	80001ec <__aeabi_uldivmod>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4613      	mov	r3, r2
 800168a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800168c:	e058      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800168e:	4b38      	ldr	r3, [pc, #224]	; (8001770 <HAL_RCC_GetSysClockFreq+0x200>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	099b      	lsrs	r3, r3, #6
 8001694:	2200      	movs	r2, #0
 8001696:	4618      	mov	r0, r3
 8001698:	4611      	mov	r1, r2
 800169a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800169e:	623b      	str	r3, [r7, #32]
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
 80016a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016a8:	4642      	mov	r2, r8
 80016aa:	464b      	mov	r3, r9
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	0159      	lsls	r1, r3, #5
 80016b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ba:	0150      	lsls	r0, r2, #5
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4641      	mov	r1, r8
 80016c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80016c6:	4649      	mov	r1, r9
 80016c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016e0:	ebb2 040a 	subs.w	r4, r2, sl
 80016e4:	eb63 050b 	sbc.w	r5, r3, fp
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	00eb      	lsls	r3, r5, #3
 80016f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016f6:	00e2      	lsls	r2, r4, #3
 80016f8:	4614      	mov	r4, r2
 80016fa:	461d      	mov	r5, r3
 80016fc:	4643      	mov	r3, r8
 80016fe:	18e3      	adds	r3, r4, r3
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	464b      	mov	r3, r9
 8001704:	eb45 0303 	adc.w	r3, r5, r3
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001716:	4629      	mov	r1, r5
 8001718:	028b      	lsls	r3, r1, #10
 800171a:	4621      	mov	r1, r4
 800171c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001720:	4621      	mov	r1, r4
 8001722:	028a      	lsls	r2, r1, #10
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800172a:	2200      	movs	r2, #0
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	61fa      	str	r2, [r7, #28]
 8001730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001734:	f7fe fd5a 	bl	80001ec <__aeabi_uldivmod>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4613      	mov	r3, r2
 800173e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_RCC_GetSysClockFreq+0x200>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	3301      	adds	r3, #1
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800175a:	e002      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_RCC_GetSysClockFreq+0x204>)
 800175e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001764:	4618      	mov	r0, r3
 8001766:	3750      	adds	r7, #80	; 0x50
 8001768:	46bd      	mov	sp, r7
 800176a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	00f42400 	.word	0x00f42400
 8001778:	007a1200 	.word	0x007a1200

0800177c <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 8001782:	f7fe fff7 	bl	8000774 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8001786:	f000 f83b 	bl	8001800 <SystemClock_Config>

	/*Configure the user defined delays*/
	delayInit(&delayLED, LED_DELAY);
 800178a:	21c8      	movs	r1, #200	; 0xc8
 800178c:	4819      	ldr	r0, [pc, #100]	; (80017f4 <main+0x78>)
 800178e:	f7fe feaf 	bl	80004f0 <delayInit>

	/*Initializa LEDs*/
	BSP_LED_Init(LED1);
 8001792:	2000      	movs	r0, #0
 8001794:	f7fe ff06 	bl	80005a4 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8001798:	2001      	movs	r0, #1
 800179a:	f7fe ff03 	bl	80005a4 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 800179e:	2002      	movs	r0, #2
 80017a0:	f7fe ff00 	bl	80005a4 <BSP_LED_Init>


	Led_TypeDef led = LED1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	71fb      	strb	r3, [r7, #7]

	  /* Infinite loop */
	while (1)
	{

		if(delayRead(&delayLED) == true)
 80017a8:	4812      	ldr	r0, [pc, #72]	; (80017f4 <main+0x78>)
 80017aa:	f7fe febd 	bl	8000528 <delayRead>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f9      	beq.n	80017a8 <main+0x2c>
		{
			GPIO_PinState ledStatus = HAL_GPIO_ReadPin(MAIN_GPIO_PORT[led], MAIN_GPIO_PIN[led]);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <main+0x7c>)
 80017b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	490f      	ldr	r1, [pc, #60]	; (80017fc <main+0x80>)
 80017c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80017c4:	4619      	mov	r1, r3
 80017c6:	4610      	mov	r0, r2
 80017c8:	f7ff fad2 	bl	8000d70 <HAL_GPIO_ReadPin>
 80017cc:	4603      	mov	r3, r0
 80017ce:	71bb      	strb	r3, [r7, #6]
			BSP_LED_Toggle(led);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe ff50 	bl	8000678 <BSP_LED_Toggle>
			if(ledStatus == GPIO_PIN_SET) (led < LED3) ? led++ : (led = LED1);
 80017d8:	79bb      	ldrb	r3, [r7, #6]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d1e4      	bne.n	80017a8 <main+0x2c>
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d803      	bhi.n	80017ec <main+0x70>
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	3301      	adds	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e7dd      	b.n	80017a8 <main+0x2c>
 80017ec:	2300      	movs	r3, #0
 80017ee:	71fb      	strb	r3, [r7, #7]
		if(delayRead(&delayLED) == true)
 80017f0:	e7da      	b.n	80017a8 <main+0x2c>
 80017f2:	bf00      	nop
 80017f4:	20000044 	.word	0x20000044
 80017f8:	20000018 	.word	0x20000018
 80017fc:	0800199c 	.word	0x0800199c

08001800 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b094      	sub	sp, #80	; 0x50
 8001804:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <SystemClock_Config+0xbc>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a2b      	ldr	r2, [pc, #172]	; (80018bc <SystemClock_Config+0xbc>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b29      	ldr	r3, [pc, #164]	; (80018bc <SystemClock_Config+0xbc>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <SystemClock_Config+0xc0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <SystemClock_Config+0xc0>)
 800182c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <SystemClock_Config+0xc0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183e:	2301      	movs	r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001842:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001846:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001848:	2302      	movs	r3, #2
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001852:	2308      	movs	r3, #8
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8001856:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800185c:	2302      	movs	r3, #2
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001860:	2307      	movs	r3, #7
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fb23 	bl	8000eb4 <HAL_RCC_OscConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8001874:	f000 f826 	bl	80018c4 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001878:	f7ff facc 	bl	8000e14 <HAL_PWREx_EnableOverDrive>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8001882:	f000 f81f 	bl	80018c4 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001886:	230f      	movs	r3, #15
 8001888:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188a:	2302      	movs	r3, #2
 800188c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001892:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001896:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800189e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018a2:	2105      	movs	r1, #5
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fd7d 	bl	80013a4 <HAL_RCC_ClockConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 80018b0:	f000 f808 	bl	80018c4 <Error_Handler>
	}
}
 80018b4:	bf00      	nop
 80018b6:	3750      	adds	r7, #80	; 0x50
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40007000 	.word	0x40007000

080018c4 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 80018c8:	2001      	movs	r0, #1
 80018ca:	f7fe febb 	bl	8000644 <BSP_LED_On>
	while (1)
 80018ce:	e7fe      	b.n	80018ce <Error_Handler+0xa>

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018d6:	e003      	b.n	80018e0 <LoopCopyDataInit>

080018d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018de:	3104      	adds	r1, #4

080018e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018e0:	480b      	ldr	r0, [pc, #44]	; (8001910 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018e8:	d3f6      	bcc.n	80018d8 <CopyDataInit>
  ldr  r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018ec:	e002      	b.n	80018f4 <LoopFillZerobss>

080018ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018f0:	f842 3b04 	str.w	r3, [r2], #4

080018f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018f8:	d3f9      	bcc.n	80018ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018fa:	f7fe fed7 	bl	80006ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f000 f811 	bl	8001924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7ff ff3b 	bl	800177c <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001908:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800190c:	080019b4 	.word	0x080019b4
  ldr  r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001914:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8001918:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 800191c:	20000050 	.word	0x20000050

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>
	...

08001924 <__libc_init_array>:
 8001924:	b570      	push	{r4, r5, r6, lr}
 8001926:	4d0d      	ldr	r5, [pc, #52]	; (800195c <__libc_init_array+0x38>)
 8001928:	4c0d      	ldr	r4, [pc, #52]	; (8001960 <__libc_init_array+0x3c>)
 800192a:	1b64      	subs	r4, r4, r5
 800192c:	10a4      	asrs	r4, r4, #2
 800192e:	2600      	movs	r6, #0
 8001930:	42a6      	cmp	r6, r4
 8001932:	d109      	bne.n	8001948 <__libc_init_array+0x24>
 8001934:	4d0b      	ldr	r5, [pc, #44]	; (8001964 <__libc_init_array+0x40>)
 8001936:	4c0c      	ldr	r4, [pc, #48]	; (8001968 <__libc_init_array+0x44>)
 8001938:	f000 f818 	bl	800196c <_init>
 800193c:	1b64      	subs	r4, r4, r5
 800193e:	10a4      	asrs	r4, r4, #2
 8001940:	2600      	movs	r6, #0
 8001942:	42a6      	cmp	r6, r4
 8001944:	d105      	bne.n	8001952 <__libc_init_array+0x2e>
 8001946:	bd70      	pop	{r4, r5, r6, pc}
 8001948:	f855 3b04 	ldr.w	r3, [r5], #4
 800194c:	4798      	blx	r3
 800194e:	3601      	adds	r6, #1
 8001950:	e7ee      	b.n	8001930 <__libc_init_array+0xc>
 8001952:	f855 3b04 	ldr.w	r3, [r5], #4
 8001956:	4798      	blx	r3
 8001958:	3601      	adds	r6, #1
 800195a:	e7f2      	b.n	8001942 <__libc_init_array+0x1e>
 800195c:	080019ac 	.word	0x080019ac
 8001960:	080019ac 	.word	0x080019ac
 8001964:	080019ac 	.word	0x080019ac
 8001968:	080019b0 	.word	0x080019b0

0800196c <_init>:
 800196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196e:	bf00      	nop
 8001970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001972:	bc08      	pop	{r3}
 8001974:	469e      	mov	lr, r3
 8001976:	4770      	bx	lr

08001978 <_fini>:
 8001978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800197a:	bf00      	nop
 800197c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800197e:	bc08      	pop	{r3}
 8001980:	469e      	mov	lr, r3
 8001982:	4770      	bx	lr
