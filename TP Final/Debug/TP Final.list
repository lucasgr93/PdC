
TP Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003610  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003878  08003878  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003880  08003880  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003884  08003884  00013884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000170  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c571  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f93  00000000  00000000  0002c5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  0002e550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a40  00000000  00000000  0002f070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002757a  00000000  00000000  0002fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001271c  00000000  00000000  0005702a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3b5f  00000000  00000000  00069746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d2a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b98  00000000  00000000  0014d2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080037a4 	.word	0x080037a4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	080037a4 	.word	0x080037a4

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <delayInit>:
 * @param  delay: pointer to a defined delay structure
 * @param  duration: duration of the delay in ms
 * @retval None
 */
void delayInit( Delay_t * delay, tick_t duration)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	if(delay != NULL && duration < MAX_DELAY)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d00e      	beq.n	800052e <delayInit+0x2e>
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000516:	4293      	cmp	r3, r2
 8000518:	d809      	bhi.n	800052e <delayInit+0x2e>
	{
		delay->duration = duration;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	605a      	str	r2, [r3, #4]
		delay->running = false;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2200      	movs	r2, #0
 8000524:	721a      	strb	r2, [r3, #8]
		delay->startTime = 0;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
		return;
 800052c:	bf00      	nop
	}
}
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <delayRead>:
 * @brief  Reads the current status of the delay timer
 * @param  delay: pointer to a defined delay structure
 * @retval True: delay elapsed
 */
bool_t delayRead( Delay_t * delay )
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	bool_t elapsed = false;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]
	if(delay != NULL)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d029      	beq.n	800059e <delayRead+0x66>
	{
		if(!delay->running)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7a1b      	ldrb	r3, [r3, #8]
 800054e:	f083 0301 	eor.w	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d00a      	beq.n	800056e <delayRead+0x36>
		{
			delay->running = true;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2201      	movs	r2, #1
 800055c:	721a      	strb	r2, [r3, #8]
			delay->startTime = HAL_GetTick();
 800055e:	f000 fc6b 	bl	8000e38 <HAL_GetTick>
 8000562:	4602      	mov	r2, r0
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	601a      	str	r2, [r3, #0]
			elapsed = false;
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]
 800056c:	e017      	b.n	800059e <delayRead+0x66>
		}
		/*We have to verify if the delay start time is less than the current timer time
		 * in case an overflow occurs*/
		else if(delay->startTime + delay->duration <= HAL_GetTick() && delay->startTime < HAL_GetTick())
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	18d4      	adds	r4, r2, r3
 8000578:	f000 fc5e 	bl	8000e38 <HAL_GetTick>
 800057c:	4603      	mov	r3, r0
 800057e:	429c      	cmp	r4, r3
 8000580:	d80d      	bhi.n	800059e <delayRead+0x66>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681c      	ldr	r4, [r3, #0]
 8000586:	f000 fc57 	bl	8000e38 <HAL_GetTick>
 800058a:	4603      	mov	r3, r0
 800058c:	429c      	cmp	r4, r3
 800058e:	d206      	bcs.n	800059e <delayRead+0x66>
		{
			delay->startTime = HAL_GetTick();
 8000590:	f000 fc52 	bl	8000e38 <HAL_GetTick>
 8000594:	4602      	mov	r2, r0
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	601a      	str	r2, [r3, #0]
			elapsed =  true;
 800059a:	2301      	movs	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return elapsed;
 800059e:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd90      	pop	{r4, r7, pc}

080005a8 <API_FSM_init>:
 * @brief  Initializes FSM
 * @param  None
 * @retval Error code
 */
uint8_t API_FSM_init()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	delayInit(&Meas_Delay, MEAS_PERIOD);
 80005ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005b0:	4810      	ldr	r0, [pc, #64]	; (80005f4 <API_FSM_init+0x4c>)
 80005b2:	f7ff ffa5 	bl	8000500 <delayInit>
	delayInit(&Alive_Delay, ALIVE_PERIOD);
 80005b6:	f242 7110 	movw	r1, #10000	; 0x2710
 80005ba:	480f      	ldr	r0, [pc, #60]	; (80005f8 <API_FSM_init+0x50>)
 80005bc:	f7ff ffa0 	bl	8000500 <delayInit>
	if(!API_UART_Init()) return FSM_ERROR;
 80005c0:	f000 f9d2 	bl	8000968 <API_UART_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	f083 0301 	eor.w	r3, r3, #1
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <API_FSM_init+0x2c>
 80005d0:	2301      	movs	r3, #1
 80005d2:	e00d      	b.n	80005f0 <API_FSM_init+0x48>
	if(API_Measure_Init() != MEAS_OK) return FSM_ERROR;
 80005d4:	f000 f87c 	bl	80006d0 <API_Measure_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <API_FSM_init+0x3a>
 80005de:	2301      	movs	r3, #1
 80005e0:	e006      	b.n	80005f0 <API_FSM_init+0x48>
	FSM_State = STAND_BY;
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <API_FSM_init+0x54>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
	motionDetected = false;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <API_FSM_init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	return FSM_OK;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000038 	.word	0x20000038
 80005f8:	20000044 	.word	0x20000044
 80005fc:	20000034 	.word	0x20000034
 8000600:	20000050 	.word	0x20000050

08000604 <API_FSM_update>:
 * @brief  Updates FSM
 * @param  None
 * @retval Error code
 */
uint8_t API_FSM_update()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	uint8_t error = FSM_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	71fb      	strb	r3, [r7, #7]
	switch(FSM_State)
 800060e:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <API_FSM_update+0xb4>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b03      	cmp	r3, #3
 8000614:	d847      	bhi.n	80006a6 <API_FSM_update+0xa2>
 8000616:	a201      	add	r2, pc, #4	; (adr r2, 800061c <API_FSM_update+0x18>)
 8000618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061c:	0800062d 	.word	0x0800062d
 8000620:	0800066b 	.word	0x0800066b
 8000624:	0800068b 	.word	0x0800068b
 8000628:	08000699 	.word	0x08000699
	{
		case STAND_BY:
		{
			if(motionDetected)
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <API_FSM_update+0xb8>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d006      	beq.n	8000642 <API_FSM_update+0x3e>
			{
				motionDetected = false;
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <API_FSM_update+0xb8>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
				FSM_State = ALARM;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <API_FSM_update+0xb4>)
 800063c:	2202      	movs	r2, #2
 800063e:	701a      	strb	r2, [r3, #0]
			}
			else if(delayRead(&Alive_Delay))
			{
				FSM_State = ALIVE;
			}
			break;
 8000640:	e034      	b.n	80006ac <API_FSM_update+0xa8>
			else if(delayRead(&Meas_Delay))
 8000642:	481f      	ldr	r0, [pc, #124]	; (80006c0 <API_FSM_update+0xbc>)
 8000644:	f7ff ff78 	bl	8000538 <delayRead>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d003      	beq.n	8000656 <API_FSM_update+0x52>
				FSM_State = MEASURING;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <API_FSM_update+0xb4>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
			break;
 8000654:	e02a      	b.n	80006ac <API_FSM_update+0xa8>
			else if(delayRead(&Alive_Delay))
 8000656:	481b      	ldr	r0, [pc, #108]	; (80006c4 <API_FSM_update+0xc0>)
 8000658:	f7ff ff6e 	bl	8000538 <delayRead>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d024      	beq.n	80006ac <API_FSM_update+0xa8>
				FSM_State = ALIVE;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <API_FSM_update+0xb4>)
 8000664:	2203      	movs	r2, #3
 8000666:	701a      	strb	r2, [r3, #0]
			break;
 8000668:	e020      	b.n	80006ac <API_FSM_update+0xa8>
		}
		case MEASURING:
		{
			if(API_Measure_GetStatus() == MOVED)
 800066a:	f000 f875 	bl	8000758 <API_Measure_GetStatus>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d006      	beq.n	8000682 <API_FSM_update+0x7e>
			{
				motionDetected = true;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <API_FSM_update+0xb8>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
				FSM_State = STAND_BY;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <API_FSM_update+0xb4>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
			}
			else FSM_State = STAND_BY;
			break;
 8000680:	e015      	b.n	80006ae <API_FSM_update+0xaa>
			else FSM_State = STAND_BY;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <API_FSM_update+0xb4>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
			break;
 8000688:	e011      	b.n	80006ae <API_FSM_update+0xaa>
		}
		case ALARM:
		{
			API_UART_SendString((uint8_t*)"ALARM: MOTION DETECTED\r\n\r\n");
 800068a:	480f      	ldr	r0, [pc, #60]	; (80006c8 <API_FSM_update+0xc4>)
 800068c:	f000 f9b0 	bl	80009f0 <API_UART_SendString>
			FSM_State = STAND_BY;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <API_FSM_update+0xb4>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
			break;
 8000696:	e00a      	b.n	80006ae <API_FSM_update+0xaa>
		}
		case ALIVE:
		{
			API_UART_SendString((uint8_t*)"I'M ALIVE. EVERYTHING OK\r\n\r\n");
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <API_FSM_update+0xc8>)
 800069a:	f000 f9a9 	bl	80009f0 <API_UART_SendString>
			FSM_State = STAND_BY;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <API_FSM_update+0xb4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
			break;
 80006a4:	e003      	b.n	80006ae <API_FSM_update+0xaa>
		}
		default:
		{
			error = FSM_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	71fb      	strb	r3, [r7, #7]
			break;
 80006aa:	e000      	b.n	80006ae <API_FSM_update+0xaa>
			break;
 80006ac:	bf00      	nop
		}
	}
	return error;
 80006ae:	79fb      	ldrb	r3, [r7, #7]

}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000034 	.word	0x20000034
 80006bc:	20000050 	.word	0x20000050
 80006c0:	20000038 	.word	0x20000038
 80006c4:	20000044 	.word	0x20000044
 80006c8:	080037bc 	.word	0x080037bc
 80006cc:	080037d8 	.word	0x080037d8

080006d0 <API_Measure_Init>:
 * @brief  Initialize measuring module
 * @param  None
 * @retval Error code
 */
uint8_t API_Measure_Init()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	status = 0;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <API_Measure_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
	memset(accelX, 0, sizeof(accelX));
 80006da:	2228      	movs	r2, #40	; 0x28
 80006dc:	2100      	movs	r1, #0
 80006de:	4815      	ldr	r0, [pc, #84]	; (8000734 <API_Measure_Init+0x64>)
 80006e0:	f003 f858 	bl	8003794 <memset>
	memset(accelY, 0, sizeof(accelY));
 80006e4:	2228      	movs	r2, #40	; 0x28
 80006e6:	2100      	movs	r1, #0
 80006e8:	4813      	ldr	r0, [pc, #76]	; (8000738 <API_Measure_Init+0x68>)
 80006ea:	f003 f853 	bl	8003794 <memset>
	memset(accelZ, 0, sizeof(accelZ));
 80006ee:	2228      	movs	r2, #40	; 0x28
 80006f0:	2100      	movs	r1, #0
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <API_Measure_Init+0x6c>)
 80006f4:	f003 f84e 	bl	8003794 <memset>
	avgX = 0; avgY = 0; avgZ = 0;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <API_Measure_Init+0x70>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <API_Measure_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <API_Measure_Init+0x78>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
	oldValueX = 0; oldValueY = 0; oldValueZ = 0;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <API_Measure_Init+0x7c>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <API_Measure_Init+0x80>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <API_Measure_Init+0x84>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
	if(MPU6500_Init() != MEAS_OK) return MEAS_ERROR;
 800071c:	f000 fa4e 	bl	8000bbc <MPU6500_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <API_Measure_Init+0x5a>
 8000726:	2301      	movs	r3, #1
 8000728:	e000      	b.n	800072c <API_Measure_Init+0x5c>
	return MEAS_OK;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000051 	.word	0x20000051
 8000734:	20000054 	.word	0x20000054
 8000738:	2000007c 	.word	0x2000007c
 800073c:	200000a4 	.word	0x200000a4
 8000740:	200000cc 	.word	0x200000cc
 8000744:	200000d0 	.word	0x200000d0
 8000748:	200000d4 	.word	0x200000d4
 800074c:	200000d8 	.word	0x200000d8
 8000750:	200000dc 	.word	0x200000dc
 8000754:	200000e0 	.word	0x200000e0

08000758 <API_Measure_GetStatus>:
 * @brief  Tells whether the device has moved or not
 * @param  None
 * @retval True: Motion detected
 */
bool_t API_Measure_GetStatus()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	oldValueX = avgX;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <API_Measure_GetStatus+0x30>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0a      	ldr	r2, [pc, #40]	; (800078c <API_Measure_GetStatus+0x34>)
 8000762:	6013      	str	r3, [r2, #0]
	oldValueZ = avgY;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <API_Measure_GetStatus+0x38>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <API_Measure_GetStatus+0x3c>)
 800076a:	6013      	str	r3, [r2, #0]
	oldValueY = avgZ;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <API_Measure_GetStatus+0x40>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <API_Measure_GetStatus+0x44>)
 8000772:	6013      	str	r3, [r2, #0]
	API_Measure_GetValues();
 8000774:	f000 f814 	bl	80007a0 <API_Measure_GetValues>
	API_Measure_GetAverage();
 8000778:	f000 f83e 	bl	80007f8 <API_Measure_GetAverage>
	return API_Measure_Evaluate();
 800077c:	f000 f898 	bl	80008b0 <API_Measure_Evaluate>
 8000780:	4603      	mov	r3, r0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000cc 	.word	0x200000cc
 800078c:	200000d8 	.word	0x200000d8
 8000790:	200000d0 	.word	0x200000d0
 8000794:	200000e0 	.word	0x200000e0
 8000798:	200000d4 	.word	0x200000d4
 800079c:	200000dc 	.word	0x200000dc

080007a0 <API_Measure_GetValues>:
 * @brief  Get measurements from MPU6500 accelerometer
 * @param  None
 * @retval None
 */
static void API_Measure_GetValues()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	for(int i=0; i<MBUFFER; i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	e017      	b.n	80007dc <API_Measure_GetValues+0x3c>
	{
		accelX[i] = MPU6500_GetAccelX();
 80007ac:	f000 fa27 	bl	8000bfe <MPU6500_GetAccelX>
 80007b0:	4602      	mov	r2, r0
 80007b2:	490e      	ldr	r1, [pc, #56]	; (80007ec <API_Measure_GetValues+0x4c>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		accelY[i] = MPU6500_GetAccelY();
 80007ba:	f000 fa28 	bl	8000c0e <MPU6500_GetAccelY>
 80007be:	4602      	mov	r2, r0
 80007c0:	490b      	ldr	r1, [pc, #44]	; (80007f0 <API_Measure_GetValues+0x50>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		accelZ[i] = MPU6500_GetAccelZ();
 80007c8:	f000 fa29 	bl	8000c1e <MPU6500_GetAccelZ>
 80007cc:	4602      	mov	r2, r0
 80007ce:	4909      	ldr	r1, [pc, #36]	; (80007f4 <API_Measure_GetValues+0x54>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<MBUFFER; i++)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3301      	adds	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b09      	cmp	r3, #9
 80007e0:	dde4      	ble.n	80007ac <API_Measure_GetValues+0xc>
	}
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000054 	.word	0x20000054
 80007f0:	2000007c 	.word	0x2000007c
 80007f4:	200000a4 	.word	0x200000a4

080007f8 <API_Measure_GetAverage>:
 * @brief  Get average from saved measurements
 * @param  None
 * @retval None
 */
static void API_Measure_GetAverage()
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
	avgX = 0; avgY = 0; avgZ = 0;
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <API_Measure_GetAverage+0x9c>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	4b24      	ldr	r3, [pc, #144]	; (8000898 <API_Measure_GetAverage+0xa0>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	4b24      	ldr	r3, [pc, #144]	; (800089c <API_Measure_GetAverage+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
	for(int i=0; i<MBUFFER; i++)
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	e01d      	b.n	8000852 <API_Measure_GetAverage+0x5a>
	{
		avgX += accelX[i];
 8000816:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <API_Measure_GetAverage+0xa8>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <API_Measure_GetAverage+0x9c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <API_Measure_GetAverage+0x9c>)
 8000826:	6013      	str	r3, [r2, #0]
		avgY += accelY[i];
 8000828:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <API_Measure_GetAverage+0xac>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <API_Measure_GetAverage+0xa0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4413      	add	r3, r2
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <API_Measure_GetAverage+0xa0>)
 8000838:	6013      	str	r3, [r2, #0]
		avgZ += accelZ[i];
 800083a:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <API_Measure_GetAverage+0xb0>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <API_Measure_GetAverage+0xa4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4413      	add	r3, r2
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <API_Measure_GetAverage+0xa4>)
 800084a:	6013      	str	r3, [r2, #0]
	for(int i=0; i<MBUFFER; i++)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3301      	adds	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b09      	cmp	r3, #9
 8000856:	ddde      	ble.n	8000816 <API_Measure_GetAverage+0x1e>
	}
	avgX = avgX / MBUFFER;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <API_Measure_GetAverage+0x9c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a13      	ldr	r2, [pc, #76]	; (80008ac <API_Measure_GetAverage+0xb4>)
 800085e:	fba2 2303 	umull	r2, r3, r2, r3
 8000862:	08db      	lsrs	r3, r3, #3
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <API_Measure_GetAverage+0x9c>)
 8000866:	6013      	str	r3, [r2, #0]
	avgY = avgY / MBUFFER;
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <API_Measure_GetAverage+0xa0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <API_Measure_GetAverage+0xb4>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	08db      	lsrs	r3, r3, #3
 8000874:	4a08      	ldr	r2, [pc, #32]	; (8000898 <API_Measure_GetAverage+0xa0>)
 8000876:	6013      	str	r3, [r2, #0]
	avgZ = avgZ / MBUFFER;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <API_Measure_GetAverage+0xa4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <API_Measure_GetAverage+0xb4>)
 800087e:	fba2 2303 	umull	r2, r3, r2, r3
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4a05      	ldr	r2, [pc, #20]	; (800089c <API_Measure_GetAverage+0xa4>)
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	200000cc 	.word	0x200000cc
 8000898:	200000d0 	.word	0x200000d0
 800089c:	200000d4 	.word	0x200000d4
 80008a0:	20000054 	.word	0x20000054
 80008a4:	2000007c 	.word	0x2000007c
 80008a8:	200000a4 	.word	0x200000a4
 80008ac:	cccccccd 	.word	0xcccccccd

080008b0 <API_Measure_Evaluate>:
 * @brief  Evaluate if there has been a significant movement in the device
 * @param  None
 * @retval True: The device has moved
 */
static bool_t API_Measure_Evaluate()
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
	uint32_t diffX = abs(avgX - oldValueX);
 80008b6:	4b25      	ldr	r3, [pc, #148]	; (800094c <API_Measure_Evaluate+0x9c>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <API_Measure_Evaluate+0xa0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bfb8      	it	lt
 80008c4:	425b      	neglt	r3, r3
 80008c6:	60fb      	str	r3, [r7, #12]
	uint32_t diffY = abs(avgY - oldValueY);
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <API_Measure_Evaluate+0xa4>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <API_Measure_Evaluate+0xa8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	bfb8      	it	lt
 80008d6:	425b      	neglt	r3, r3
 80008d8:	60bb      	str	r3, [r7, #8]
	uint32_t diffZ = abs(avgZ - oldValueZ);
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <API_Measure_Evaluate+0xac>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <API_Measure_Evaluate+0xb0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	bfb8      	it	lt
 80008e8:	425b      	neglt	r3, r3
 80008ea:	607b      	str	r3, [r7, #4]

	if((diffX > ACCEL_THRESHOLD && diffX < 0x7FFF) ||
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008f2:	d304      	bcc.n	80008fe <API_Measure_Evaluate+0x4e>
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d911      	bls.n	8000922 <API_Measure_Evaluate+0x72>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000904:	d304      	bcc.n	8000910 <API_Measure_Evaluate+0x60>
	   (diffY > ACCEL_THRESHOLD && diffY < 0x7FFF) ||
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800090c:	4293      	cmp	r3, r2
 800090e:	d908      	bls.n	8000922 <API_Measure_Evaluate+0x72>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000916:	d308      	bcc.n	800092a <API_Measure_Evaluate+0x7a>
	   (diffZ > ACCEL_THRESHOLD && diffZ < 0x7FFF))
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800091e:	4293      	cmp	r3, r2
 8000920:	d803      	bhi.n	800092a <API_Measure_Evaluate+0x7a>
		{
			status = MOVED;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <API_Measure_Evaluate+0xb4>)
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	e002      	b.n	8000930 <API_Measure_Evaluate+0x80>
		}
	else status = NOT_MOVED;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <API_Measure_Evaluate+0xb4>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]

	return status;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <API_Measure_Evaluate+0xb4>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	bf14      	ite	ne
 8000938:	2301      	movne	r3, #1
 800093a:	2300      	moveq	r3, #0
 800093c:	b2db      	uxtb	r3, r3
}
 800093e:	4618      	mov	r0, r3
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	200000cc 	.word	0x200000cc
 8000950:	200000d8 	.word	0x200000d8
 8000954:	200000d0 	.word	0x200000d0
 8000958:	200000dc 	.word	0x200000dc
 800095c:	200000d4 	.word	0x200000d4
 8000960:	200000e0 	.word	0x200000e0
 8000964:	20000051 	.word	0x20000051

08000968 <API_UART_Init>:
 * @brief  Initialize UART instance
 * @param  None
 * @retval True if initialization is correct or false if not
 */
bool API_UART_Init()
{
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b090      	sub	sp, #64	; 0x40
 800096c:	af00      	add	r7, sp, #0
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */

	  UartHandle.Instance        = USARTx;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <API_UART_Init+0x7c>)
 8000970:	4a1d      	ldr	r2, [pc, #116]	; (80009e8 <API_UART_Init+0x80>)
 8000972:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = 9600;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <API_UART_Init+0x7c>)
 8000976:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800097a:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <API_UART_Init+0x7c>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <API_UART_Init+0x7c>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <API_UART_Init+0x7c>)
 800098a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800098e:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <API_UART_Init+0x7c>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <API_UART_Init+0x7c>)
 8000998:	220c      	movs	r2, #12
 800099a:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <API_UART_Init+0x7c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]

	  if(HAL_UART_Init(&UartHandle) == HAL_OK)
 80009a2:	4810      	ldr	r0, [pc, #64]	; (80009e4 <API_UART_Init+0x7c>)
 80009a4:	f002 fa60 	bl	8002e68 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d114      	bne.n	80009d8 <API_UART_Init+0x70>
	  {
		  uint8_t welcomeMsg[] = "Inicialización correcta\n\rParámetros: Odd, 7, 1, No HwCtrl\r\n";
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <API_UART_Init+0x84>)
 80009b0:	463c      	mov	r4, r7
 80009b2:	461d      	mov	r5, r3
 80009b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009c4:	c407      	stmia	r4!, {r0, r1, r2}
 80009c6:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit(&UartHandle, welcomeMsg, sizeof(welcomeMsg), txTimeout);
 80009c8:	4639      	mov	r1, r7
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	223e      	movs	r2, #62	; 0x3e
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <API_UART_Init+0x7c>)
 80009d0:	f002 fa97 	bl	8002f02 <HAL_UART_Transmit>
		  return true;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e000      	b.n	80009da <API_UART_Init+0x72>
	  }
	  else return false;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3740      	adds	r7, #64	; 0x40
 80009de:	46bd      	mov	sp, r7
 80009e0:	bdb0      	pop	{r4, r5, r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000e4 	.word	0x200000e4
 80009e8:	40004800 	.word	0x40004800
 80009ec:	080037f8 	.word	0x080037f8

080009f0 <API_UART_SendString>:
 * @brief  Sends an entire string
 * @param  pstring: pointer to the string to be sent
 * @retval None
 */
void API_UART_SendString(uint8_t * pstring)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	if(pstring != NULL)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00a      	beq.n	8000a14 <API_UART_SendString+0x24>
	{
		HAL_UART_Transmit(&UartHandle, pstring, strlen((const char*) pstring), txTimeout);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff fbf4 	bl	80001ec <strlen>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	2364      	movs	r3, #100	; 0x64
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <API_UART_SendString+0x2c>)
 8000a0e:	f002 fa78 	bl	8002f02 <HAL_UART_Transmit>
	}
	return;
 8000a12:	bf00      	nop
 8000a14:	bf00      	nop
}
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000e4 	.word	0x200000e4

08000a20 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10e      	bne.n	8000a4e <BSP_LED_Init+0x2e>
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <BSP_LED_Init+0x94>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <BSP_LED_Init+0x94>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <BSP_LED_Init+0x94>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	e00d      	b.n	8000a6a <BSP_LED_Init+0x4a>
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <BSP_LED_Init+0x94>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <BSP_LED_Init+0x94>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <BSP_LED_Init+0x94>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <BSP_LED_Init+0x98>)
 8000a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <BSP_LED_Init+0x9c>)
 8000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a88:	f107 0214 	add.w	r2, r7, #20
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 fac4 	bl	800101c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	4a09      	ldr	r2, [pc, #36]	; (8000abc <BSP_LED_Init+0x9c>)
 8000a98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <BSP_LED_Init+0x98>)
 8000aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f000 fc64 	bl	8001374 <HAL_GPIO_WritePin>
}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	08003858 	.word	0x08003858
 8000abc:	20000000 	.word	0x20000000

08000ac0 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <BSP_LED_On+0x2c>)
 8000ace:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <BSP_LED_On+0x30>)
 8000ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ada:	2201      	movs	r2, #1
 8000adc:	4619      	mov	r1, r3
 8000ade:	f000 fc49 	bl	8001374 <HAL_GPIO_WritePin>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000000 	.word	0x20000000
 8000af0:	08003858 	.word	0x08003858

08000af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <SystemInit+0x60>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <SystemInit+0x60>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <SystemInit+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <SystemInit+0x64>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <SystemInit+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <SystemInit+0x64>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <SystemInit+0x64>)
 8000b20:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <SystemInit+0x64>)
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <SystemInit+0x68>)
 8000b2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <SystemInit+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <SystemInit+0x64>)
 8000b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <SystemInit+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SystemInit+0x60>)
 8000b44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b48:	609a      	str	r2, [r3, #8]
#endif
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	24003010 	.word	0x24003010

08000b60 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000bb4:	f000 f92c 	bl	8000e10 <HAL_IncTick>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <MPU6500_Init>:
 * @brief  Initialize MPU6500 driver module
 * @param  None
 * @retval Error code
 */
uint32_t MPU6500_Init()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	if(MPU6500_I2C_Init() != MPU6500_OK) return MPU6500_ERR;
 8000bc0:	f000 f836 	bl	8000c30 <MPU6500_I2C_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MPU6500_Init+0x12>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e007      	b.n	8000bde <MPU6500_Init+0x22>
	if(MPU6500_FactoryReset() != MPU6500_OK) return MPU6500_ERR;
 8000bce:	f000 f808 	bl	8000be2 <MPU6500_FactoryReset>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MPU6500_Init+0x20>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <MPU6500_Init+0x22>

	return MPU6500_OK;
 8000bdc:	2300      	movs	r3, #0

}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <MPU6500_FactoryReset>:
 * @brief  Performs a factory reset
 * @param  None
 * @retval Error code
 */
uint32_t MPU6500_FactoryReset()
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
	if(MPU6500_WriteRegister(PWR_MGMT_1, PWR_MGMT_1_DEVICE_RESET) != MPU6500_OK) return MPU6500_ERR;
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	206b      	movs	r0, #107	; 0x6b
 8000bea:	f000 f895 	bl	8000d18 <MPU6500_WriteRegister>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MPU6500_FactoryReset+0x16>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <MPU6500_FactoryReset+0x18>
	else return MPU6500_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <MPU6500_GetAccelX>:
 * @brief  Gets accelerometer x-axis measurement
 * @param  None
 * @retval X-axis acceleration value
 */
uint32_t MPU6500_GetAccelX()
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
	return MPU6500_ReadRegister16(ACCEL_XOUT_H);
 8000c02:	203b      	movs	r0, #59	; 0x3b
 8000c04:	f000 f844 	bl	8000c90 <MPU6500_ReadRegister16>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <MPU6500_GetAccelY>:
 * @brief  Gets accelerometer y-axis measurement
 * @param  None
 * @retval Y-axis acceleration value
 */
uint32_t MPU6500_GetAccelY()
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
	return MPU6500_ReadRegister16(ACCEL_YOUT_H);
 8000c12:	203d      	movs	r0, #61	; 0x3d
 8000c14:	f000 f83c 	bl	8000c90 <MPU6500_ReadRegister16>
 8000c18:	4603      	mov	r3, r0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <MPU6500_GetAccelZ>:
 * @brief  Gets accelerometer z-axis measurement
 * @param  None
 * @retval Z-axis acceleration value
 */
uint32_t MPU6500_GetAccelZ()
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
	return MPU6500_ReadRegister16(ACCEL_ZOUT_H);
 8000c22:	203f      	movs	r0, #63	; 0x3f
 8000c24:	f000 f834 	bl	8000c90 <MPU6500_ReadRegister16>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <MPU6500_I2C_Init>:
 * @brief  Initialize I2C peripheral
 * @param  None
 * @retval Error code
 */
uint32_t MPU6500_I2C_Init()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	I2cHandle.Instance             = I2C1;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MPU6500_I2C_Init+0x54>)
 8000c38:	4a13      	ldr	r2, [pc, #76]	; (8000c88 <MPU6500_I2C_Init+0x58>)
 8000c3a:	601a      	str	r2, [r3, #0]
	I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MPU6500_I2C_Init+0x54>)
 8000c3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c42:	611a      	str	r2, [r3, #16]
	I2cHandle.Init.ClockSpeed      = 400000;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MPU6500_I2C_Init+0x54>)
 8000c46:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <MPU6500_I2C_Init+0x5c>)
 8000c48:	605a      	str	r2, [r3, #4]
	I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MPU6500_I2C_Init+0x54>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
	I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_16_9;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MPU6500_I2C_Init+0x54>)
 8000c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c56:	609a      	str	r2, [r3, #8]
	I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MPU6500_I2C_Init+0x54>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
	I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MPU6500_I2C_Init+0x54>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
	I2cHandle.Init.OwnAddress1     = I2C_MASTER_ADDRESS;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <MPU6500_I2C_Init+0x54>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	60da      	str	r2, [r3, #12]
	I2cHandle.Init.OwnAddress2     = 0xFE;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MPU6500_I2C_Init+0x54>)
 8000c6c:	22fe      	movs	r2, #254	; 0xfe
 8000c6e:	619a      	str	r2, [r3, #24]

	uint32_t error = HAL_I2C_Init(&I2cHandle);
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MPU6500_I2C_Init+0x54>)
 8000c72:	f000 fb99 	bl	80013a8 <HAL_I2C_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	607b      	str	r3, [r7, #4]
	return error;
 8000c7a:	687b      	ldr	r3, [r7, #4]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000128 	.word	0x20000128
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	00061a80 	.word	0x00061a80

08000c90 <MPU6500_ReadRegister16>:
 * @brief  Performs a 16bits-long reading sequence
 * @param  regAddress: Target register
 * @retval Response value or error code
 */
uint32_t MPU6500_ReadRegister16(uint8_t regAddress)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af04      	add	r7, sp, #16
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	if(regAddress > HIGHEST_REGISTER) return MPU6500_ERR;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b7e      	cmp	r3, #126	; 0x7e
 8000c9e:	d901      	bls.n	8000ca4 <MPU6500_ReadRegister16+0x14>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e031      	b.n	8000d08 <MPU6500_ReadRegister16+0x78>
	memset(RxBuffer, 0, sizeof(RxBuffer));
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4819      	ldr	r0, [pc, #100]	; (8000d10 <MPU6500_ReadRegister16+0x80>)
 8000caa:	f002 fd73 	bl	8003794 <memset>
	uint32_t data = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
	uint32_t error;
	error = HAL_I2C_Mem_Read(&I2cHandle, I2C_SLAVE_ADDRESS, regAddress, 1, RxBuffer, 2, 1000);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	9302      	str	r3, [sp, #8]
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	9301      	str	r3, [sp, #4]
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MPU6500_ReadRegister16+0x80>)
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	21d0      	movs	r1, #208	; 0xd0
 8000cc8:	4812      	ldr	r0, [pc, #72]	; (8000d14 <MPU6500_ReadRegister16+0x84>)
 8000cca:	f000 fdab 	bl	8001824 <HAL_I2C_Mem_Read>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	60bb      	str	r3, [r7, #8]
	if(error == MPU6500_OK)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d114      	bne.n	8000d02 <MPU6500_ReadRegister16+0x72>
	{
		error = HAL_I2C_GetError(&I2cHandle);
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <MPU6500_ReadRegister16+0x84>)
 8000cda:	f000 ffc9 	bl	8001c70 <HAL_I2C_GetError>
 8000cde:	60b8      	str	r0, [r7, #8]
		if(error == HAL_I2C_ERROR_NONE)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10a      	bne.n	8000cfc <MPU6500_ReadRegister16+0x6c>
		{
			data = RxBuffer[0]<<8;
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <MPU6500_ReadRegister16+0x80>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	60fb      	str	r3, [r7, #12]
			data += RxBuffer[1];
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MPU6500_ReadRegister16+0x80>)
 8000cf0:	785b      	ldrb	r3, [r3, #1]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	e004      	b.n	8000d06 <MPU6500_ReadRegister16+0x76>
		}
		else
		{
			data = error;
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	e001      	b.n	8000d06 <MPU6500_ReadRegister16+0x76>
		}
	}
	else data = error;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	60fb      	str	r3, [r7, #12]

	return data;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000180 	.word	0x20000180
 8000d14:	20000128 	.word	0x20000128

08000d18 <MPU6500_WriteRegister>:
 * @param  regAddress: Target register
 * @param  config: Configuration to be sent
 * @retval Error code
 */
uint32_t MPU6500_WriteRegister(uint8_t regAddress, uint8_t config)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460a      	mov	r2, r1
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	4613      	mov	r3, r2
 8000d26:	71bb      	strb	r3, [r7, #6]
	if(regAddress > HIGHEST_REGISTER) return MPU6500_ERR;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b7e      	cmp	r3, #126	; 0x7e
 8000d2c:	d901      	bls.n	8000d32 <MPU6500_WriteRegister+0x1a>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e01a      	b.n	8000d68 <MPU6500_WriteRegister+0x50>
	TxBuffer = config;
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <MPU6500_WriteRegister+0x58>)
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	7013      	strb	r3, [r2, #0]
	uint32_t error;
	error = HAL_I2C_Mem_Write(&I2cHandle, I2C_SLAVE_ADDRESS, regAddress, 1, &TxBuffer, 1, 1000);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d40:	9302      	str	r3, [sp, #8]
 8000d42:	2301      	movs	r3, #1
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MPU6500_WriteRegister+0x58>)
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	21d0      	movs	r1, #208	; 0xd0
 8000d4e:	4809      	ldr	r0, [pc, #36]	; (8000d74 <MPU6500_WriteRegister+0x5c>)
 8000d50:	f000 fc6e 	bl	8001630 <HAL_I2C_Mem_Write>
 8000d54:	4603      	mov	r3, r0
 8000d56:	60fb      	str	r3, [r7, #12]
	if(error == MPU6500_OK)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d103      	bne.n	8000d66 <MPU6500_WriteRegister+0x4e>
	{
		error = HAL_I2C_GetError(&I2cHandle);
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MPU6500_WriteRegister+0x5c>)
 8000d60:	f000 ff86 	bl	8001c70 <HAL_I2C_GetError>
 8000d64:	60f8      	str	r0, [r7, #12]
	}

	return error;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000017c 	.word	0x2000017c
 8000d74:	20000128 	.word	0x20000128

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_Init+0x34>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_Init+0x34>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d86:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x34>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x34>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f90d 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f001 fb72 	bl	8002488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f917 	bl	8001002 <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dec:	f000 f8ed 	bl	8000fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2000000c 	.word	0x2000000c
 8000e08:	20000014 	.word	0x20000014
 8000e0c:	20000010 	.word	0x20000010

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000014 	.word	0x20000014
 8000e34:	20000184 	.word	0x20000184

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000184 	.word	0x20000184

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f94:	f7ff ff8e 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff47 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff5c 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff8e 	bl	8000f08 <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffb0 	bl	8000f70 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	e177      	b.n	8001328 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	429a      	cmp	r2, r3
 8001052:	f040 8166 	bne.w	8001322 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d005      	beq.n	800106e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	2b02      	cmp	r3, #2
 800106c:	d130      	bne.n	80010d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 0201 	and.w	r2, r3, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d017      	beq.n	800110c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d123      	bne.n	8001160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	69b9      	ldr	r1, [r7, #24]
 800115c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0203 	and.w	r2, r3, #3
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80c0 	beq.w	8001322 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b66      	ldr	r3, [pc, #408]	; (8001340 <HAL_GPIO_Init+0x324>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a65      	ldr	r2, [pc, #404]	; (8001340 <HAL_GPIO_Init+0x324>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_GPIO_Init+0x324>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011be:	4a61      	ldr	r2, [pc, #388]	; (8001344 <HAL_GPIO_Init+0x328>)
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	220f      	movs	r2, #15
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a58      	ldr	r2, [pc, #352]	; (8001348 <HAL_GPIO_Init+0x32c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d037      	beq.n	800125a <HAL_GPIO_Init+0x23e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a57      	ldr	r2, [pc, #348]	; (800134c <HAL_GPIO_Init+0x330>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d031      	beq.n	8001256 <HAL_GPIO_Init+0x23a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a56      	ldr	r2, [pc, #344]	; (8001350 <HAL_GPIO_Init+0x334>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d02b      	beq.n	8001252 <HAL_GPIO_Init+0x236>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a55      	ldr	r2, [pc, #340]	; (8001354 <HAL_GPIO_Init+0x338>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d025      	beq.n	800124e <HAL_GPIO_Init+0x232>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a54      	ldr	r2, [pc, #336]	; (8001358 <HAL_GPIO_Init+0x33c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d01f      	beq.n	800124a <HAL_GPIO_Init+0x22e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a53      	ldr	r2, [pc, #332]	; (800135c <HAL_GPIO_Init+0x340>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d019      	beq.n	8001246 <HAL_GPIO_Init+0x22a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a52      	ldr	r2, [pc, #328]	; (8001360 <HAL_GPIO_Init+0x344>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d013      	beq.n	8001242 <HAL_GPIO_Init+0x226>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a51      	ldr	r2, [pc, #324]	; (8001364 <HAL_GPIO_Init+0x348>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d00d      	beq.n	800123e <HAL_GPIO_Init+0x222>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a50      	ldr	r2, [pc, #320]	; (8001368 <HAL_GPIO_Init+0x34c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d007      	beq.n	800123a <HAL_GPIO_Init+0x21e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4f      	ldr	r2, [pc, #316]	; (800136c <HAL_GPIO_Init+0x350>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d101      	bne.n	8001236 <HAL_GPIO_Init+0x21a>
 8001232:	2309      	movs	r3, #9
 8001234:	e012      	b.n	800125c <HAL_GPIO_Init+0x240>
 8001236:	230a      	movs	r3, #10
 8001238:	e010      	b.n	800125c <HAL_GPIO_Init+0x240>
 800123a:	2308      	movs	r3, #8
 800123c:	e00e      	b.n	800125c <HAL_GPIO_Init+0x240>
 800123e:	2307      	movs	r3, #7
 8001240:	e00c      	b.n	800125c <HAL_GPIO_Init+0x240>
 8001242:	2306      	movs	r3, #6
 8001244:	e00a      	b.n	800125c <HAL_GPIO_Init+0x240>
 8001246:	2305      	movs	r3, #5
 8001248:	e008      	b.n	800125c <HAL_GPIO_Init+0x240>
 800124a:	2304      	movs	r3, #4
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x240>
 800124e:	2303      	movs	r3, #3
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x240>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x240>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x240>
 800125a:	2300      	movs	r3, #0
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	f002 0203 	and.w	r2, r2, #3
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800126c:	4935      	ldr	r1, [pc, #212]	; (8001344 <HAL_GPIO_Init+0x328>)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127a:	4b3d      	ldr	r3, [pc, #244]	; (8001370 <HAL_GPIO_Init+0x354>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129e:	4a34      	ldr	r2, [pc, #208]	; (8001370 <HAL_GPIO_Init+0x354>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a4:	4b32      	ldr	r3, [pc, #200]	; (8001370 <HAL_GPIO_Init+0x354>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c8:	4a29      	ldr	r2, [pc, #164]	; (8001370 <HAL_GPIO_Init+0x354>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <HAL_GPIO_Init+0x354>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <HAL_GPIO_Init+0x354>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_GPIO_Init+0x354>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a14      	ldr	r2, [pc, #80]	; (8001370 <HAL_GPIO_Init+0x354>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3301      	adds	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	f67f ae84 	bls.w	8001038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40013800 	.word	0x40013800
 8001348:	40020000 	.word	0x40020000
 800134c:	40020400 	.word	0x40020400
 8001350:	40020800 	.word	0x40020800
 8001354:	40020c00 	.word	0x40020c00
 8001358:	40021000 	.word	0x40021000
 800135c:	40021400 	.word	0x40021400
 8001360:	40021800 	.word	0x40021800
 8001364:	40021c00 	.word	0x40021c00
 8001368:	40022000 	.word	0x40022000
 800136c:	40022400 	.word	0x40022400
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001390:	e003      	b.n	800139a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e12b      	b.n	8001612 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f001 f808 	bl	80023e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2224      	movs	r2, #36	; 0x24
 80013d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800140a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800140c:	f001 fd04 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8001410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a81      	ldr	r2, [pc, #516]	; (800161c <HAL_I2C_Init+0x274>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d807      	bhi.n	800142c <HAL_I2C_Init+0x84>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4a80      	ldr	r2, [pc, #512]	; (8001620 <HAL_I2C_Init+0x278>)
 8001420:	4293      	cmp	r3, r2
 8001422:	bf94      	ite	ls
 8001424:	2301      	movls	r3, #1
 8001426:	2300      	movhi	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	e006      	b.n	800143a <HAL_I2C_Init+0x92>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4a7d      	ldr	r2, [pc, #500]	; (8001624 <HAL_I2C_Init+0x27c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	bf94      	ite	ls
 8001434:	2301      	movls	r3, #1
 8001436:	2300      	movhi	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e0e7      	b.n	8001612 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4a78      	ldr	r2, [pc, #480]	; (8001628 <HAL_I2C_Init+0x280>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9b      	lsrs	r3, r3, #18
 800144c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	430a      	orrs	r2, r1
 8001460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a6a      	ldr	r2, [pc, #424]	; (800161c <HAL_I2C_Init+0x274>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d802      	bhi.n	800147c <HAL_I2C_Init+0xd4>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3301      	adds	r3, #1
 800147a:	e009      	b.n	8001490 <HAL_I2C_Init+0xe8>
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	4a69      	ldr	r2, [pc, #420]	; (800162c <HAL_I2C_Init+0x284>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	099b      	lsrs	r3, r3, #6
 800148e:	3301      	adds	r3, #1
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	430b      	orrs	r3, r1
 8001496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	495c      	ldr	r1, [pc, #368]	; (800161c <HAL_I2C_Init+0x274>)
 80014ac:	428b      	cmp	r3, r1
 80014ae:	d819      	bhi.n	80014e4 <HAL_I2C_Init+0x13c>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e59      	subs	r1, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80014be:	1c59      	adds	r1, r3, #1
 80014c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014c4:	400b      	ands	r3, r1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00a      	beq.n	80014e0 <HAL_I2C_Init+0x138>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1e59      	subs	r1, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d8:	3301      	adds	r3, #1
 80014da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014de:	e051      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 80014e0:	2304      	movs	r3, #4
 80014e2:	e04f      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d111      	bne.n	8001510 <HAL_I2C_Init+0x168>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e58      	subs	r0, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	440b      	add	r3, r1
 80014fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	e012      	b.n	8001536 <HAL_I2C_Init+0x18e>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1e58      	subs	r0, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	0099      	lsls	r1, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	fbb0 f3f3 	udiv	r3, r0, r3
 8001526:	3301      	adds	r3, #1
 8001528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Init+0x196>
 800153a:	2301      	movs	r3, #1
 800153c:	e022      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10e      	bne.n	8001564 <HAL_I2C_Init+0x1bc>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1e58      	subs	r0, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6859      	ldr	r1, [r3, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	440b      	add	r3, r1
 8001554:	fbb0 f3f3 	udiv	r3, r0, r3
 8001558:	3301      	adds	r3, #1
 800155a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001562:	e00f      	b.n	8001584 <HAL_I2C_Init+0x1dc>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	0099      	lsls	r1, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	fbb0 f3f3 	udiv	r3, r0, r3
 800157a:	3301      	adds	r3, #1
 800157c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	6809      	ldr	r1, [r1, #0]
 8001588:	4313      	orrs	r3, r2
 800158a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6911      	ldr	r1, [r2, #16]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68d2      	ldr	r2, [r2, #12]
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	000186a0 	.word	0x000186a0
 8001620:	001e847f 	.word	0x001e847f
 8001624:	003d08ff 	.word	0x003d08ff
 8001628:	431bde83 	.word	0x431bde83
 800162c:	10624dd3 	.word	0x10624dd3

08001630 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af02      	add	r7, sp, #8
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	4608      	mov	r0, r1
 800163a:	4611      	mov	r1, r2
 800163c:	461a      	mov	r2, r3
 800163e:	4603      	mov	r3, r0
 8001640:	817b      	strh	r3, [r7, #10]
 8001642:	460b      	mov	r3, r1
 8001644:	813b      	strh	r3, [r7, #8]
 8001646:	4613      	mov	r3, r2
 8001648:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800164a:	f7ff fbf5 	bl	8000e38 <HAL_GetTick>
 800164e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b20      	cmp	r3, #32
 800165a:	f040 80d9 	bne.w	8001810 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2319      	movs	r3, #25
 8001664:	2201      	movs	r2, #1
 8001666:	496d      	ldr	r1, [pc, #436]	; (800181c <HAL_I2C_Mem_Write+0x1ec>)
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 fc8b 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001674:	2302      	movs	r3, #2
 8001676:	e0cc      	b.n	8001812 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_I2C_Mem_Write+0x56>
 8001682:	2302      	movs	r3, #2
 8001684:	e0c5      	b.n	8001812 <HAL_I2C_Mem_Write+0x1e2>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b01      	cmp	r3, #1
 800169a:	d007      	beq.n	80016ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2221      	movs	r2, #33	; 0x21
 80016c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2240      	movs	r2, #64	; 0x40
 80016c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4a4d      	ldr	r2, [pc, #308]	; (8001820 <HAL_I2C_Mem_Write+0x1f0>)
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016ee:	88f8      	ldrh	r0, [r7, #6]
 80016f0:	893a      	ldrh	r2, [r7, #8]
 80016f2:	8979      	ldrh	r1, [r7, #10]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	4603      	mov	r3, r0
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 fac2 	bl	8001c88 <I2C_RequestMemoryWrite>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d052      	beq.n	80017b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e081      	b.n	8001812 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 fd0c 	bl	8002130 <I2C_WaitOnTXEFlagUntilTimeout>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00d      	beq.n	800173a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	2b04      	cmp	r3, #4
 8001724:	d107      	bne.n	8001736 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001734:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e06b      	b.n	8001812 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001754:	3b01      	subs	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001760:	b29b      	uxth	r3, r3
 8001762:	3b01      	subs	r3, #1
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b04      	cmp	r3, #4
 8001776:	d11b      	bne.n	80017b0 <HAL_I2C_Mem_Write+0x180>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177c:	2b00      	cmp	r3, #0
 800177e:	d017      	beq.n	80017b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1aa      	bne.n	800170e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fcf8 	bl	80021b2 <I2C_WaitOnBTFFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00d      	beq.n	80017e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d107      	bne.n	80017e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e016      	b.n	8001812 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	e000      	b.n	8001812 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001810:	2302      	movs	r3, #2
  }
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	00100002 	.word	0x00100002
 8001820:	ffff0000 	.word	0xffff0000

08001824 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4603      	mov	r3, r0
 8001834:	817b      	strh	r3, [r7, #10]
 8001836:	460b      	mov	r3, r1
 8001838:	813b      	strh	r3, [r7, #8]
 800183a:	4613      	mov	r3, r2
 800183c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800183e:	f7ff fafb 	bl	8000e38 <HAL_GetTick>
 8001842:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b20      	cmp	r3, #32
 800184e:	f040 8208 	bne.w	8001c62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2319      	movs	r3, #25
 8001858:	2201      	movs	r2, #1
 800185a:	497b      	ldr	r1, [pc, #492]	; (8001a48 <HAL_I2C_Mem_Read+0x224>)
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 fb91 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001868:	2302      	movs	r3, #2
 800186a:	e1fb      	b.n	8001c64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_I2C_Mem_Read+0x56>
 8001876:	2302      	movs	r3, #2
 8001878:	e1f4      	b.n	8001c64 <HAL_I2C_Mem_Read+0x440>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b01      	cmp	r3, #1
 800188e:	d007      	beq.n	80018a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2222      	movs	r2, #34	; 0x22
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2240      	movs	r2, #64	; 0x40
 80018bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4a5b      	ldr	r2, [pc, #364]	; (8001a4c <HAL_I2C_Mem_Read+0x228>)
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018e2:	88f8      	ldrh	r0, [r7, #6]
 80018e4:	893a      	ldrh	r2, [r7, #8]
 80018e6:	8979      	ldrh	r1, [r7, #10]
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	4603      	mov	r3, r0
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 fa5e 	bl	8001db4 <I2C_RequestMemoryRead>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e1b0      	b.n	8001c64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	d113      	bne.n	8001932 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	623b      	str	r3, [r7, #32]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	623b      	str	r3, [r7, #32]
 800191e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e184      	b.n	8001c3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	2b01      	cmp	r3, #1
 8001938:	d11b      	bne.n	8001972 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001948:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e164      	b.n	8001c3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001976:	2b02      	cmp	r3, #2
 8001978:	d11b      	bne.n	80019b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001988:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001998:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	e144      	b.n	8001c3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80019c8:	e138      	b.n	8001c3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	f200 80f1 	bhi.w	8001bb6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d123      	bne.n	8001a24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 fc27 	bl	8002234 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e139      	b.n	8001c64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a22:	e10b      	b.n	8001c3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d14e      	bne.n	8001aca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a32:	2200      	movs	r2, #0
 8001a34:	4906      	ldr	r1, [pc, #24]	; (8001a50 <HAL_I2C_Mem_Read+0x22c>)
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 faa4 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d008      	beq.n	8001a54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e10e      	b.n	8001c64 <HAL_I2C_Mem_Read+0x440>
 8001a46:	bf00      	nop
 8001a48:	00100002 	.word	0x00100002
 8001a4c:	ffff0000 	.word	0xffff0000
 8001a50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ac8:	e0b8      	b.n	8001c3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4966      	ldr	r1, [pc, #408]	; (8001c6c <HAL_I2C_Mem_Read+0x448>)
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 fa55 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0bf      	b.n	8001c64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	494f      	ldr	r1, [pc, #316]	; (8001c6c <HAL_I2C_Mem_Read+0x448>)
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 fa27 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e091      	b.n	8001c64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bb4:	e042      	b.n	8001c3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fb3a 	bl	8002234 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e04c      	b.n	8001c64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d118      	bne.n	8001c3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f47f aec2 	bne.w	80019ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c62:	2302      	movs	r3, #2
  }
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3728      	adds	r7, #40	; 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	00010004 	.word	0x00010004

08001c70 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	4608      	mov	r0, r1
 8001c92:	4611      	mov	r1, r2
 8001c94:	461a      	mov	r2, r3
 8001c96:	4603      	mov	r3, r0
 8001c98:	817b      	strh	r3, [r7, #10]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	813b      	strh	r3, [r7, #8]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f960 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00d      	beq.n	8001ce6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd8:	d103      	bne.n	8001ce2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e05f      	b.n	8001da6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ce6:	897b      	ldrh	r3, [r7, #10]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	6a3a      	ldr	r2, [r7, #32]
 8001cfa:	492d      	ldr	r1, [pc, #180]	; (8001db0 <I2C_RequestMemoryWrite+0x128>)
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 f998 	bl	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e04c      	b.n	8001da6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fa02 	bl	8002130 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00d      	beq.n	8001d4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d107      	bne.n	8001d4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e02b      	b.n	8001da6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d54:	893b      	ldrh	r3, [r7, #8]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	611a      	str	r2, [r3, #16]
 8001d5e:	e021      	b.n	8001da4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d60:	893b      	ldrh	r3, [r7, #8]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d70:	6a39      	ldr	r1, [r7, #32]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f9dc 	bl	8002130 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00d      	beq.n	8001d9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d107      	bne.n	8001d96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e005      	b.n	8001da6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d9a:	893b      	ldrh	r3, [r7, #8]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	00010002 	.word	0x00010002

08001db4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	4608      	mov	r0, r1
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	817b      	strh	r3, [r7, #10]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	813b      	strh	r3, [r7, #8]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ddc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f8c2 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00d      	beq.n	8001e22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e14:	d103      	bne.n	8001e1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0aa      	b.n	8001f78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e22:	897b      	ldrh	r3, [r7, #10]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	6a3a      	ldr	r2, [r7, #32]
 8001e36:	4952      	ldr	r1, [pc, #328]	; (8001f80 <I2C_RequestMemoryRead+0x1cc>)
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f8fa 	bl	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e097      	b.n	8001f78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	6a39      	ldr	r1, [r7, #32]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f964 	bl	8002130 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00d      	beq.n	8001e8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d107      	bne.n	8001e86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e076      	b.n	8001f78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d105      	bne.n	8001e9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e90:	893b      	ldrh	r3, [r7, #8]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	611a      	str	r2, [r3, #16]
 8001e9a:	e021      	b.n	8001ee0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e9c:	893b      	ldrh	r3, [r7, #8]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eac:	6a39      	ldr	r1, [r7, #32]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f93e 	bl	8002130 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00d      	beq.n	8001ed6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d107      	bne.n	8001ed2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e050      	b.n	8001f78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed6:	893b      	ldrh	r3, [r7, #8]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee2:	6a39      	ldr	r1, [r7, #32]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f923 	bl	8002130 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00d      	beq.n	8001f0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d107      	bne.n	8001f08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e035      	b.n	8001f78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f82b 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f42:	d103      	bne.n	8001f4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e013      	b.n	8001f78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f50:	897b      	ldrh	r3, [r7, #10]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	6a3a      	ldr	r2, [r7, #32]
 8001f64:	4906      	ldr	r1, [pc, #24]	; (8001f80 <I2C_RequestMemoryRead+0x1cc>)
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f863 	bl	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	00010002 	.word	0x00010002

08001f84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f94:	e025      	b.n	8001fe2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f9c:	d021      	beq.n	8001fe2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9e:	f7fe ff4b 	bl	8000e38 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d302      	bcc.n	8001fb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d116      	bne.n	8001fe2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f043 0220 	orr.w	r2, r3, #32
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e023      	b.n	800202a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d10d      	bne.n	8002008 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf0c      	ite	eq
 8001ffe:	2301      	moveq	r3, #1
 8002000:	2300      	movne	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	e00c      	b.n	8002022 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4013      	ands	r3, r2
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf0c      	ite	eq
 800201a:	2301      	moveq	r3, #1
 800201c:	2300      	movne	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	429a      	cmp	r2, r3
 8002026:	d0b6      	beq.n	8001f96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002040:	e051      	b.n	80020e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002050:	d123      	bne.n	800209a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002060:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800206a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f043 0204 	orr.w	r2, r3, #4
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e046      	b.n	8002128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a0:	d021      	beq.n	80020e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a2:	f7fe fec9 	bl	8000e38 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d302      	bcc.n	80020b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d116      	bne.n	80020e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f043 0220 	orr.w	r2, r3, #32
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e020      	b.n	8002128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	0c1b      	lsrs	r3, r3, #16
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d10c      	bne.n	800210a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4013      	ands	r3, r2
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf14      	ite	ne
 8002102:	2301      	movne	r3, #1
 8002104:	2300      	moveq	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	e00b      	b.n	8002122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	43da      	mvns	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4013      	ands	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d18d      	bne.n	8002042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800213c:	e02d      	b.n	800219a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f8ce 	bl	80022e0 <I2C_IsAcknowledgeFailed>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e02d      	b.n	80021aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002154:	d021      	beq.n	800219a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002156:	f7fe fe6f 	bl	8000e38 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	429a      	cmp	r2, r3
 8002164:	d302      	bcc.n	800216c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d116      	bne.n	800219a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f043 0220 	orr.w	r2, r3, #32
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e007      	b.n	80021aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a4:	2b80      	cmp	r3, #128	; 0x80
 80021a6:	d1ca      	bne.n	800213e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021be:	e02d      	b.n	800221c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f88d 	bl	80022e0 <I2C_IsAcknowledgeFailed>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e02d      	b.n	800222c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d6:	d021      	beq.n	800221c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d8:	f7fe fe2e 	bl	8000e38 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d302      	bcc.n	80021ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d116      	bne.n	800221c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	f043 0220 	orr.w	r2, r3, #32
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e007      	b.n	800222c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b04      	cmp	r3, #4
 8002228:	d1ca      	bne.n	80021c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002240:	e042      	b.n	80022c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b10      	cmp	r3, #16
 800224e:	d119      	bne.n	8002284 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0210 	mvn.w	r2, #16
 8002258:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e029      	b.n	80022d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002284:	f7fe fdd8 	bl	8000e38 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	429a      	cmp	r2, r3
 8002292:	d302      	bcc.n	800229a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e007      	b.n	80022d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d1b5      	bne.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f6:	d11b      	bne.n	8002330 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002300:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	4b23      	ldr	r3, [pc, #140]	; (80023dc <HAL_UART_MspInit+0x9c>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	4a22      	ldr	r2, [pc, #136]	; (80023dc <HAL_UART_MspInit+0x9c>)
 8002352:	f043 0308 	orr.w	r3, r3, #8
 8002356:	6313      	str	r3, [r2, #48]	; 0x30
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_UART_MspInit+0x9c>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_UART_MspInit+0x9c>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <HAL_UART_MspInit+0x9c>)
 800236e:	f043 0308 	orr.w	r3, r3, #8
 8002372:	6313      	str	r3, [r2, #48]	; 0x30
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_UART_MspInit+0x9c>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_UART_MspInit+0x9c>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <HAL_UART_MspInit+0x9c>)
 800238a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800238e:	6413      	str	r3, [r2, #64]	; 0x40
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_UART_MspInit+0x9c>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800239c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80023ae:	2307      	movs	r3, #7
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4809      	ldr	r0, [pc, #36]	; (80023e0 <HAL_UART_MspInit+0xa0>)
 80023ba:	f7fe fe2f 	bl	800101c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80023be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80023c4:	2307      	movs	r3, #7
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	4804      	ldr	r0, [pc, #16]	; (80023e0 <HAL_UART_MspInit+0xa0>)
 80023d0:	f7fe fe24 	bl	800101c <HAL_GPIO_Init>
}
 80023d4:	bf00      	nop
 80023d6:	3728      	adds	r7, #40	; 0x28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020c00 	.word	0x40020c00

080023e4 <HAL_I2C_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_I2C_MspInit+0x9c>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	4a22      	ldr	r2, [pc, #136]	; (8002480 <HAL_I2C_MspInit+0x9c>)
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	6313      	str	r3, [r2, #48]	; 0x30
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_I2C_MspInit+0x9c>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <HAL_I2C_MspInit+0x9c>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <HAL_I2C_MspInit+0x9c>)
 8002412:	f043 0302 	orr.w	r3, r3, #2
 8002416:	6313      	str	r3, [r2, #48]	; 0x30
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_I2C_MspInit+0x9c>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_I2C_MspInit+0x9c>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <HAL_I2C_MspInit+0x9c>)
 800242e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002432:	6413      	str	r3, [r2, #64]	; 0x40
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_I2C_MspInit+0x9c>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8002440:	2340      	movs	r3, #64	; 0x40
 8002442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002444:	2312      	movs	r3, #18
 8002446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002448:	2301      	movs	r3, #1
 800244a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800244c:	2302      	movs	r3, #2
 800244e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8002450:	2304      	movs	r3, #4
 8002452:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	4619      	mov	r1, r3
 800245a:	480a      	ldr	r0, [pc, #40]	; (8002484 <HAL_I2C_MspInit+0xa0>)
 800245c:	f7fe fdde 	bl	800101c <HAL_GPIO_Init>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8002460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 8002466:	2304      	movs	r3, #4
 8002468:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	4804      	ldr	r0, [pc, #16]	; (8002484 <HAL_I2C_MspInit+0xa0>)
 8002472:	f7fe fdd3 	bl	800101c <HAL_GPIO_Init>
}
 8002476:	bf00      	nop
 8002478:	3728      	adds	r7, #40	; 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40020400 	.word	0x40020400

08002488 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_PWREx_EnableOverDrive+0x90>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <HAL_PWREx_EnableOverDrive+0x90>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_PWREx_EnableOverDrive+0x90>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_PWREx_EnableOverDrive+0x94>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c4:	f7fe fcb8 	bl	8000e38 <HAL_GetTick>
 80024c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024ca:	e009      	b.n	80024e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024cc:	f7fe fcb4 	bl	8000e38 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024da:	d901      	bls.n	80024e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e01f      	b.n	8002520 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_PWREx_EnableOverDrive+0x98>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ec:	d1ee      	bne.n	80024cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024f4:	f7fe fca0 	bl	8000e38 <HAL_GetTick>
 80024f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024fa:	e009      	b.n	8002510 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024fc:	f7fe fc9c 	bl	8000e38 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800250a:	d901      	bls.n	8002510 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e007      	b.n	8002520 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_PWREx_EnableOverDrive+0x98>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800251c:	d1ee      	bne.n	80024fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40023800 	.word	0x40023800
 800252c:	420e0040 	.word	0x420e0040
 8002530:	40007000 	.word	0x40007000
 8002534:	420e0044 	.word	0x420e0044

08002538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e267      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d075      	beq.n	8002642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b04      	cmp	r3, #4
 8002560:	d00c      	beq.n	800257c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002562:	4b85      	ldr	r3, [pc, #532]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800256a:	2b08      	cmp	r3, #8
 800256c:	d112      	bne.n	8002594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800256e:	4b82      	ldr	r3, [pc, #520]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800257a:	d10b      	bne.n	8002594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	4b7e      	ldr	r3, [pc, #504]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d05b      	beq.n	8002640 <HAL_RCC_OscConfig+0x108>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d157      	bne.n	8002640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e242      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259c:	d106      	bne.n	80025ac <HAL_RCC_OscConfig+0x74>
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a75      	ldr	r2, [pc, #468]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e01d      	b.n	80025e8 <HAL_RCC_OscConfig+0xb0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x98>
 80025b6:	4b70      	ldr	r3, [pc, #448]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6f      	ldr	r2, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6c      	ldr	r2, [pc, #432]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e00b      	b.n	80025e8 <HAL_RCC_OscConfig+0xb0>
 80025d0:	4b69      	ldr	r3, [pc, #420]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a68      	ldr	r2, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b66      	ldr	r3, [pc, #408]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a65      	ldr	r2, [pc, #404]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fc22 	bl	8000e38 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f8:	f7fe fc1e 	bl	8000e38 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e207      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	4b5b      	ldr	r3, [pc, #364]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0xc0>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe fc0e 	bl	8000e38 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002620:	f7fe fc0a 	bl	8000e38 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1f3      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	4b51      	ldr	r3, [pc, #324]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0xe8>
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d063      	beq.n	8002716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800264e:	4b4a      	ldr	r3, [pc, #296]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002662:	2b08      	cmp	r3, #8
 8002664:	d11c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002666:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d116      	bne.n	80026a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_RCC_OscConfig+0x152>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d001      	beq.n	800268a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e1c7      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268a:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4937      	ldr	r1, [pc, #220]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	e03a      	b.n	8002716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d020      	beq.n	80026ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a8:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_RCC_OscConfig+0x244>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fbc3 	bl	8000e38 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b6:	f7fe fbbf 	bl	8000e38 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e1a8      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4925      	ldr	r1, [pc, #148]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_RCC_OscConfig+0x244>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fba2 	bl	8000e38 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f8:	f7fe fb9e 	bl	8000e38 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e187      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d036      	beq.n	8002790 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <HAL_RCC_OscConfig+0x248>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002730:	f7fe fb82 	bl	8000e38 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002738:	f7fe fb7e 	bl	8000e38 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e167      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800274c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x200>
 8002756:	e01b      	b.n	8002790 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_OscConfig+0x248>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fe fb6b 	bl	8000e38 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	e00e      	b.n	8002784 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002766:	f7fe fb67 	bl	8000e38 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d907      	bls.n	8002784 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e150      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
 8002778:	40023800 	.word	0x40023800
 800277c:	42470000 	.word	0x42470000
 8002780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	4b88      	ldr	r3, [pc, #544]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ea      	bne.n	8002766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8097 	beq.w	80028cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a2:	4b81      	ldr	r3, [pc, #516]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10f      	bne.n	80027ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b7d      	ldr	r3, [pc, #500]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a7c      	ldr	r2, [pc, #496]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b7a      	ldr	r3, [pc, #488]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	4b77      	ldr	r3, [pc, #476]	; (80029ac <HAL_RCC_OscConfig+0x474>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d118      	bne.n	800280c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027da:	4b74      	ldr	r3, [pc, #464]	; (80029ac <HAL_RCC_OscConfig+0x474>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a73      	ldr	r2, [pc, #460]	; (80029ac <HAL_RCC_OscConfig+0x474>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e6:	f7fe fb27 	bl	8000e38 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ee:	f7fe fb23 	bl	8000e38 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e10c      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	4b6a      	ldr	r3, [pc, #424]	; (80029ac <HAL_RCC_OscConfig+0x474>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x2ea>
 8002814:	4b64      	ldr	r3, [pc, #400]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4a63      	ldr	r2, [pc, #396]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	; 0x70
 8002820:	e01c      	b.n	800285c <HAL_RCC_OscConfig+0x324>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b05      	cmp	r3, #5
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0x30c>
 800282a:	4b5f      	ldr	r3, [pc, #380]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a5e      	ldr	r2, [pc, #376]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	4b5c      	ldr	r3, [pc, #368]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a5b      	ldr	r2, [pc, #364]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
 8002842:	e00b      	b.n	800285c <HAL_RCC_OscConfig+0x324>
 8002844:	4b58      	ldr	r3, [pc, #352]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	4a57      	ldr	r2, [pc, #348]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	6713      	str	r3, [r2, #112]	; 0x70
 8002850:	4b55      	ldr	r3, [pc, #340]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	4a54      	ldr	r2, [pc, #336]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002856:	f023 0304 	bic.w	r3, r3, #4
 800285a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d015      	beq.n	8002890 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fae8 	bl	8000e38 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe fae4 	bl	8000e38 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0cb      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002882:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0ee      	beq.n	800286c <HAL_RCC_OscConfig+0x334>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002890:	f7fe fad2 	bl	8000e38 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7fe face 	bl	8000e38 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0b5      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ae:	4b3e      	ldr	r3, [pc, #248]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1ee      	bne.n	8002898 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c0:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	4a38      	ldr	r2, [pc, #224]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80a1 	beq.w	8002a18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028d6:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d05c      	beq.n	800299c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d141      	bne.n	800296e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <HAL_RCC_OscConfig+0x478>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe faa2 	bl	8000e38 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fa9e 	bl	8000e38 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e087      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69da      	ldr	r2, [r3, #28]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	019b      	lsls	r3, r3, #6
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	3b01      	subs	r3, #1
 8002930:	041b      	lsls	r3, r3, #16
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	491b      	ldr	r1, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x478>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe fa77 	bl	8000e38 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe fa73 	bl	8000e38 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e05c      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x416>
 800296c:	e054      	b.n	8002a18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_RCC_OscConfig+0x478>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe fa60 	bl	8000e38 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe fa5c 	bl	8000e38 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e045      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x444>
 800299a:	e03d      	b.n	8002a18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e038      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000
 80029b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x4ec>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d028      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d121      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d11a      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029e4:	4013      	ands	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d111      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	3b01      	subs	r3, #1
 80029fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800

08002a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0cc      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d90c      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b8      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a58      	ldr	r2, [pc, #352]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a52      	ldr	r2, [pc, #328]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	494d      	ldr	r1, [pc, #308]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d044      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d119      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e067      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f023 0203 	bic.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4934      	ldr	r1, [pc, #208]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b18:	f7fe f98e 	bl	8000e38 <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7fe f98a 	bl	8000e38 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e04f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 020c 	and.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d1eb      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d20c      	bcs.n	8002b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e032      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4916      	ldr	r1, [pc, #88]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	490e      	ldr	r1, [pc, #56]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bae:	f000 f821 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	490a      	ldr	r1, [pc, #40]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	5ccb      	ldrb	r3, [r1, r3]
 8002bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe f8ee 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023c00 	.word	0x40023c00
 8002be4:	40023800 	.word	0x40023800
 8002be8:	08003860 	.word	0x08003860
 8002bec:	2000000c 	.word	0x2000000c
 8002bf0:	20000010 	.word	0x20000010

08002bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf8:	b094      	sub	sp, #80	; 0x50
 8002bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8002c00:	2300      	movs	r3, #0
 8002c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c04:	2300      	movs	r3, #0
 8002c06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c0c:	4b79      	ldr	r3, [pc, #484]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d00d      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x40>
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	f200 80e1 	bhi.w	8002de0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x34>
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d003      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c26:	e0db      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c28:	4b73      	ldr	r3, [pc, #460]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c2c:	e0db      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c2e:	4b73      	ldr	r3, [pc, #460]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x208>)
 8002c30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c32:	e0d8      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c34:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c3e:	4b6d      	ldr	r3, [pc, #436]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d063      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4a:	4b6a      	ldr	r3, [pc, #424]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	099b      	lsrs	r3, r3, #6
 8002c50:	2200      	movs	r2, #0
 8002c52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c5e:	2300      	movs	r3, #0
 8002c60:	637b      	str	r3, [r7, #52]	; 0x34
 8002c62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c66:	4622      	mov	r2, r4
 8002c68:	462b      	mov	r3, r5
 8002c6a:	f04f 0000 	mov.w	r0, #0
 8002c6e:	f04f 0100 	mov.w	r1, #0
 8002c72:	0159      	lsls	r1, r3, #5
 8002c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c78:	0150      	lsls	r0, r2, #5
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4621      	mov	r1, r4
 8002c80:	1a51      	subs	r1, r2, r1
 8002c82:	6139      	str	r1, [r7, #16]
 8002c84:	4629      	mov	r1, r5
 8002c86:	eb63 0301 	sbc.w	r3, r3, r1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c98:	4659      	mov	r1, fp
 8002c9a:	018b      	lsls	r3, r1, #6
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	018a      	lsls	r2, r1, #6
 8002ca6:	4651      	mov	r1, sl
 8002ca8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cac:	4659      	mov	r1, fp
 8002cae:	eb63 0901 	sbc.w	r9, r3, r1
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cc6:	4690      	mov	r8, r2
 8002cc8:	4699      	mov	r9, r3
 8002cca:	4623      	mov	r3, r4
 8002ccc:	eb18 0303 	adds.w	r3, r8, r3
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	462b      	mov	r3, r5
 8002cd4:	eb49 0303 	adc.w	r3, r9, r3
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	024b      	lsls	r3, r1, #9
 8002cea:	4621      	mov	r1, r4
 8002cec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	024a      	lsls	r2, r1, #9
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d04:	f7fd fa7a 	bl	80001fc <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d10:	e058      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d12:	4b38      	ldr	r3, [pc, #224]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	099b      	lsrs	r3, r3, #6
 8002d18:	2200      	movs	r2, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
 8002d28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	464b      	mov	r3, r9
 8002d30:	f04f 0000 	mov.w	r0, #0
 8002d34:	f04f 0100 	mov.w	r1, #0
 8002d38:	0159      	lsls	r1, r3, #5
 8002d3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d3e:	0150      	lsls	r0, r2, #5
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4641      	mov	r1, r8
 8002d46:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d64:	ebb2 040a 	subs.w	r4, r2, sl
 8002d68:	eb63 050b 	sbc.w	r5, r3, fp
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	00eb      	lsls	r3, r5, #3
 8002d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d7a:	00e2      	lsls	r2, r4, #3
 8002d7c:	4614      	mov	r4, r2
 8002d7e:	461d      	mov	r5, r3
 8002d80:	4643      	mov	r3, r8
 8002d82:	18e3      	adds	r3, r4, r3
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	464b      	mov	r3, r9
 8002d88:	eb45 0303 	adc.w	r3, r5, r3
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	028b      	lsls	r3, r1, #10
 8002d9e:	4621      	mov	r1, r4
 8002da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002da4:	4621      	mov	r1, r4
 8002da6:	028a      	lsls	r2, r1, #10
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dae:	2200      	movs	r2, #0
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	61fa      	str	r2, [r7, #28]
 8002db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db8:	f7fd fa20 	bl	80001fc <__aeabi_uldivmod>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	0c1b      	lsrs	r3, r3, #16
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dde:	e002      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002de2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3750      	adds	r7, #80	; 0x50
 8002dec:	46bd      	mov	sp, r7
 8002dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	007a1200 	.word	0x007a1200

08002e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	2000000c 	.word	0x2000000c

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e1c:	f7ff fff0 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	0a9b      	lsrs	r3, r3, #10
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4903      	ldr	r1, [pc, #12]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	08003870 	.word	0x08003870

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e44:	f7ff ffdc 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	0b5b      	lsrs	r3, r3, #13
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4903      	ldr	r1, [pc, #12]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40023800 	.word	0x40023800
 8002e64:	08003870 	.word	0x08003870

08002e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e03f      	b.n	8002efa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff fa56 	bl	8002340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	; 0x24
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f929 	bl	8003104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b08a      	sub	sp, #40	; 0x28
 8002f06:	af02      	add	r7, sp, #8
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d17c      	bne.n	800301c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_UART_Transmit+0x2c>
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e075      	b.n	800301e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Transmit+0x3e>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e06e      	b.n	800301e <HAL_UART_Transmit+0x11c>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2221      	movs	r2, #33	; 0x21
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f56:	f7fd ff6f 	bl	8000e38 <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	88fa      	ldrh	r2, [r7, #6]
 8002f66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d108      	bne.n	8002f84 <HAL_UART_Transmit+0x82>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d104      	bne.n	8002f84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	e003      	b.n	8002f8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f94:	e02a      	b.n	8002fec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f840 	bl	8003026 <UART_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e036      	b.n	800301e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	e007      	b.n	8002fde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1cf      	bne.n	8002f96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2140      	movs	r1, #64	; 0x40
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f810 	bl	8003026 <UART_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e006      	b.n	800301e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b090      	sub	sp, #64	; 0x40
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	4613      	mov	r3, r2
 8003034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003036:	e050      	b.n	80030da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800303e:	d04c      	beq.n	80030da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <UART_WaitOnFlagUntilTimeout+0x30>
 8003046:	f7fd fef7 	bl	8000e38 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003052:	429a      	cmp	r2, r3
 8003054:	d241      	bcs.n	80030da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	e853 3f00 	ldrex	r3, [r3]
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	330c      	adds	r3, #12
 8003074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003076:	637a      	str	r2, [r7, #52]	; 0x34
 8003078:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800307c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e5      	bne.n	8003056 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3314      	adds	r3, #20
 8003090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	613b      	str	r3, [r7, #16]
   return(result);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3314      	adds	r3, #20
 80030a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030aa:	623a      	str	r2, [r7, #32]
 80030ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	69f9      	ldr	r1, [r7, #28]
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e5      	bne.n	800308a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e00f      	b.n	80030fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d09f      	beq.n	8003038 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3740      	adds	r7, #64	; 0x40
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003108:	b0c0      	sub	sp, #256	; 0x100
 800310a:	af00      	add	r7, sp, #0
 800310c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	68d9      	ldr	r1, [r3, #12]
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	ea40 0301 	orr.w	r3, r0, r1
 800312c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	431a      	orrs	r2, r3
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	431a      	orrs	r2, r3
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800315c:	f021 010c 	bic.w	r1, r1, #12
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800316a:	430b      	orrs	r3, r1
 800316c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317e:	6999      	ldr	r1, [r3, #24]
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	ea40 0301 	orr.w	r3, r0, r1
 800318a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b8f      	ldr	r3, [pc, #572]	; (80033d0 <UART_SetConfig+0x2cc>)
 8003194:	429a      	cmp	r2, r3
 8003196:	d005      	beq.n	80031a4 <UART_SetConfig+0xa0>
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b8d      	ldr	r3, [pc, #564]	; (80033d4 <UART_SetConfig+0x2d0>)
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d104      	bne.n	80031ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031a4:	f7ff fe4c 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 80031a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031ac:	e003      	b.n	80031b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ae:	f7ff fe33 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 80031b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c0:	f040 810c 	bne.w	80033dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031d6:	4622      	mov	r2, r4
 80031d8:	462b      	mov	r3, r5
 80031da:	1891      	adds	r1, r2, r2
 80031dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80031de:	415b      	adcs	r3, r3
 80031e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031e6:	4621      	mov	r1, r4
 80031e8:	eb12 0801 	adds.w	r8, r2, r1
 80031ec:	4629      	mov	r1, r5
 80031ee:	eb43 0901 	adc.w	r9, r3, r1
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003206:	4690      	mov	r8, r2
 8003208:	4699      	mov	r9, r3
 800320a:	4623      	mov	r3, r4
 800320c:	eb18 0303 	adds.w	r3, r8, r3
 8003210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003214:	462b      	mov	r3, r5
 8003216:	eb49 0303 	adc.w	r3, r9, r3
 800321a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800322a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800322e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003232:	460b      	mov	r3, r1
 8003234:	18db      	adds	r3, r3, r3
 8003236:	653b      	str	r3, [r7, #80]	; 0x50
 8003238:	4613      	mov	r3, r2
 800323a:	eb42 0303 	adc.w	r3, r2, r3
 800323e:	657b      	str	r3, [r7, #84]	; 0x54
 8003240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003244:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003248:	f7fc ffd8 	bl	80001fc <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <UART_SetConfig+0x2d4>)
 8003252:	fba3 2302 	umull	r2, r3, r3, r2
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	011c      	lsls	r4, r3, #4
 800325a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003264:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003268:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800326c:	4642      	mov	r2, r8
 800326e:	464b      	mov	r3, r9
 8003270:	1891      	adds	r1, r2, r2
 8003272:	64b9      	str	r1, [r7, #72]	; 0x48
 8003274:	415b      	adcs	r3, r3
 8003276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003278:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800327c:	4641      	mov	r1, r8
 800327e:	eb12 0a01 	adds.w	sl, r2, r1
 8003282:	4649      	mov	r1, r9
 8003284:	eb43 0b01 	adc.w	fp, r3, r1
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003294:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800329c:	4692      	mov	sl, r2
 800329e:	469b      	mov	fp, r3
 80032a0:	4643      	mov	r3, r8
 80032a2:	eb1a 0303 	adds.w	r3, sl, r3
 80032a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032aa:	464b      	mov	r3, r9
 80032ac:	eb4b 0303 	adc.w	r3, fp, r3
 80032b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032c8:	460b      	mov	r3, r1
 80032ca:	18db      	adds	r3, r3, r3
 80032cc:	643b      	str	r3, [r7, #64]	; 0x40
 80032ce:	4613      	mov	r3, r2
 80032d0:	eb42 0303 	adc.w	r3, r2, r3
 80032d4:	647b      	str	r3, [r7, #68]	; 0x44
 80032d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032de:	f7fc ff8d 	bl	80001fc <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <UART_SetConfig+0x2d4>)
 80032ea:	fba3 2301 	umull	r2, r3, r3, r1
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2264      	movs	r2, #100	; 0x64
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	1acb      	subs	r3, r1, r3
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <UART_SetConfig+0x2d4>)
 8003300:	fba3 2302 	umull	r2, r3, r3, r2
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800330c:	441c      	add	r4, r3
 800330e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003318:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800331c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003320:	4642      	mov	r2, r8
 8003322:	464b      	mov	r3, r9
 8003324:	1891      	adds	r1, r2, r2
 8003326:	63b9      	str	r1, [r7, #56]	; 0x38
 8003328:	415b      	adcs	r3, r3
 800332a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800332c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003330:	4641      	mov	r1, r8
 8003332:	1851      	adds	r1, r2, r1
 8003334:	6339      	str	r1, [r7, #48]	; 0x30
 8003336:	4649      	mov	r1, r9
 8003338:	414b      	adcs	r3, r1
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003348:	4659      	mov	r1, fp
 800334a:	00cb      	lsls	r3, r1, #3
 800334c:	4651      	mov	r1, sl
 800334e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003352:	4651      	mov	r1, sl
 8003354:	00ca      	lsls	r2, r1, #3
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	4603      	mov	r3, r0
 800335c:	4642      	mov	r2, r8
 800335e:	189b      	adds	r3, r3, r2
 8003360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003364:	464b      	mov	r3, r9
 8003366:	460a      	mov	r2, r1
 8003368:	eb42 0303 	adc.w	r3, r2, r3
 800336c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800337c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003384:	460b      	mov	r3, r1
 8003386:	18db      	adds	r3, r3, r3
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
 800338a:	4613      	mov	r3, r2
 800338c:	eb42 0303 	adc.w	r3, r2, r3
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003396:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800339a:	f7fc ff2f 	bl	80001fc <__aeabi_uldivmod>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <UART_SetConfig+0x2d4>)
 80033a4:	fba3 1302 	umull	r1, r3, r3, r2
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	2164      	movs	r1, #100	; 0x64
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	3332      	adds	r3, #50	; 0x32
 80033b6:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <UART_SetConfig+0x2d4>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 0207 	and.w	r2, r3, #7
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4422      	add	r2, r4
 80033ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033cc:	e105      	b.n	80035da <UART_SetConfig+0x4d6>
 80033ce:	bf00      	nop
 80033d0:	40011000 	.word	0x40011000
 80033d4:	40011400 	.word	0x40011400
 80033d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e0:	2200      	movs	r2, #0
 80033e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033ee:	4642      	mov	r2, r8
 80033f0:	464b      	mov	r3, r9
 80033f2:	1891      	adds	r1, r2, r2
 80033f4:	6239      	str	r1, [r7, #32]
 80033f6:	415b      	adcs	r3, r3
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033fe:	4641      	mov	r1, r8
 8003400:	1854      	adds	r4, r2, r1
 8003402:	4649      	mov	r1, r9
 8003404:	eb43 0501 	adc.w	r5, r3, r1
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	00eb      	lsls	r3, r5, #3
 8003412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003416:	00e2      	lsls	r2, r4, #3
 8003418:	4614      	mov	r4, r2
 800341a:	461d      	mov	r5, r3
 800341c:	4643      	mov	r3, r8
 800341e:	18e3      	adds	r3, r4, r3
 8003420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003424:	464b      	mov	r3, r9
 8003426:	eb45 0303 	adc.w	r3, r5, r3
 800342a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800343a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800344a:	4629      	mov	r1, r5
 800344c:	008b      	lsls	r3, r1, #2
 800344e:	4621      	mov	r1, r4
 8003450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003454:	4621      	mov	r1, r4
 8003456:	008a      	lsls	r2, r1, #2
 8003458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800345c:	f7fc fece 	bl	80001fc <__aeabi_uldivmod>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4b60      	ldr	r3, [pc, #384]	; (80035e8 <UART_SetConfig+0x4e4>)
 8003466:	fba3 2302 	umull	r2, r3, r3, r2
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	011c      	lsls	r4, r3, #4
 800346e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003472:	2200      	movs	r2, #0
 8003474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003478:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800347c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003480:	4642      	mov	r2, r8
 8003482:	464b      	mov	r3, r9
 8003484:	1891      	adds	r1, r2, r2
 8003486:	61b9      	str	r1, [r7, #24]
 8003488:	415b      	adcs	r3, r3
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003490:	4641      	mov	r1, r8
 8003492:	1851      	adds	r1, r2, r1
 8003494:	6139      	str	r1, [r7, #16]
 8003496:	4649      	mov	r1, r9
 8003498:	414b      	adcs	r3, r1
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a8:	4659      	mov	r1, fp
 80034aa:	00cb      	lsls	r3, r1, #3
 80034ac:	4651      	mov	r1, sl
 80034ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b2:	4651      	mov	r1, sl
 80034b4:	00ca      	lsls	r2, r1, #3
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	4642      	mov	r2, r8
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c4:	464b      	mov	r3, r9
 80034c6:	460a      	mov	r2, r1
 80034c8:	eb42 0303 	adc.w	r3, r2, r3
 80034cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80034da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034e8:	4649      	mov	r1, r9
 80034ea:	008b      	lsls	r3, r1, #2
 80034ec:	4641      	mov	r1, r8
 80034ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034f2:	4641      	mov	r1, r8
 80034f4:	008a      	lsls	r2, r1, #2
 80034f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034fa:	f7fc fe7f 	bl	80001fc <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <UART_SetConfig+0x4e4>)
 8003504:	fba3 1302 	umull	r1, r3, r3, r2
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	2164      	movs	r1, #100	; 0x64
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	3332      	adds	r3, #50	; 0x32
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <UART_SetConfig+0x4e4>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003522:	441c      	add	r4, r3
 8003524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003528:	2200      	movs	r2, #0
 800352a:	673b      	str	r3, [r7, #112]	; 0x70
 800352c:	677a      	str	r2, [r7, #116]	; 0x74
 800352e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003532:	4642      	mov	r2, r8
 8003534:	464b      	mov	r3, r9
 8003536:	1891      	adds	r1, r2, r2
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	415b      	adcs	r3, r3
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003542:	4641      	mov	r1, r8
 8003544:	1851      	adds	r1, r2, r1
 8003546:	6039      	str	r1, [r7, #0]
 8003548:	4649      	mov	r1, r9
 800354a:	414b      	adcs	r3, r1
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800355a:	4659      	mov	r1, fp
 800355c:	00cb      	lsls	r3, r1, #3
 800355e:	4651      	mov	r1, sl
 8003560:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003564:	4651      	mov	r1, sl
 8003566:	00ca      	lsls	r2, r1, #3
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	4603      	mov	r3, r0
 800356e:	4642      	mov	r2, r8
 8003570:	189b      	adds	r3, r3, r2
 8003572:	66bb      	str	r3, [r7, #104]	; 0x68
 8003574:	464b      	mov	r3, r9
 8003576:	460a      	mov	r2, r1
 8003578:	eb42 0303 	adc.w	r3, r2, r3
 800357c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	663b      	str	r3, [r7, #96]	; 0x60
 8003588:	667a      	str	r2, [r7, #100]	; 0x64
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003596:	4649      	mov	r1, r9
 8003598:	008b      	lsls	r3, r1, #2
 800359a:	4641      	mov	r1, r8
 800359c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a0:	4641      	mov	r1, r8
 80035a2:	008a      	lsls	r2, r1, #2
 80035a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035a8:	f7fc fe28 	bl	80001fc <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <UART_SetConfig+0x4e4>)
 80035b2:	fba3 1302 	umull	r1, r3, r3, r2
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2164      	movs	r1, #100	; 0x64
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	3332      	adds	r3, #50	; 0x32
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <UART_SetConfig+0x4e4>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4422      	add	r2, r4
 80035d8:	609a      	str	r2, [r3, #8]
}
 80035da:	bf00      	nop
 80035dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035e0:	46bd      	mov	sp, r7
 80035e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e6:	bf00      	nop
 80035e8:	51eb851f 	.word	0x51eb851f

080035ec <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 80035f0:	f7fd fbc2 	bl	8000d78 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80035f4:	f000 f812 	bl	800361c <SystemClock_Config>

	/*Initialize LED2*/
	BSP_LED_Init(LED2);
 80035f8:	2001      	movs	r0, #1
 80035fa:	f7fd fa11 	bl	8000a20 <BSP_LED_Init>

	/*Initialize Finite State Machine*/
	if(API_FSM_init() != FSM_OK) Error_Handler();
 80035fe:	f7fc ffd3 	bl	80005a8 <API_FSM_init>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <main+0x20>
 8003608:	f000 f86a 	bl	80036e0 <Error_Handler>


	  /* Infinite loop */
	while (1)
	{
		if(API_FSM_update() != FSM_OK) Error_Handler();
 800360c:	f7fc fffa 	bl	8000604 <API_FSM_update>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0fa      	beq.n	800360c <main+0x20>
 8003616:	f000 f863 	bl	80036e0 <Error_Handler>
 800361a:	e7f7      	b.n	800360c <main+0x20>

0800361c <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b094      	sub	sp, #80	; 0x50
 8003620:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <SystemClock_Config+0xbc>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	4a2b      	ldr	r2, [pc, #172]	; (80036d8 <SystemClock_Config+0xbc>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003630:	6413      	str	r3, [r2, #64]	; 0x40
 8003632:	4b29      	ldr	r3, [pc, #164]	; (80036d8 <SystemClock_Config+0xbc>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	4b26      	ldr	r3, [pc, #152]	; (80036dc <SystemClock_Config+0xc0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a25      	ldr	r2, [pc, #148]	; (80036dc <SystemClock_Config+0xc0>)
 8003648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b23      	ldr	r3, [pc, #140]	; (80036dc <SystemClock_Config+0xc0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003656:	607b      	str	r3, [r7, #4]
 8003658:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800365a:	2301      	movs	r3, #1
 800365c:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800365e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003662:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003664:	2302      	movs	r3, #2
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003668:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 800366e:	2308      	movs	r3, #8
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8003672:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003676:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003678:	2302      	movs	r3, #2
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800367c:	2307      	movs	r3, #7
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003680:	f107 030c 	add.w	r3, r7, #12
 8003684:	4618      	mov	r0, r3
 8003686:	f7fe ff57 	bl	8002538 <HAL_RCC_OscConfig>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8003690:	f000 f826 	bl	80036e0 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003694:	f7fe ff00 	bl	8002498 <HAL_PWREx_EnableOverDrive>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 800369e:	f000 f81f 	bl	80036e0 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80036a2:	230f      	movs	r3, #15
 80036a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036a6:	2302      	movs	r3, #2
 80036a8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036aa:	2300      	movs	r3, #0
 80036ac:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036b2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036be:	2105      	movs	r1, #5
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff f9b1 	bl	8002a28 <HAL_RCC_ClockConfig>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 80036cc:	f000 f808 	bl	80036e0 <Error_Handler>
	}
}
 80036d0:	bf00      	nop
 80036d2:	3750      	adds	r7, #80	; 0x50
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40007000 	.word	0x40007000

080036e0 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	/* Turn LED1 on */
	BSP_LED_On(LED2);
 80036e4:	2001      	movs	r0, #1
 80036e6:	f7fd f9eb 	bl	8000ac0 <BSP_LED_On>
	API_UART_SendString((uint8_t*)"\r\nFATAL ERROR. RESET DEVICE\r\n");
 80036ea:	4802      	ldr	r0, [pc, #8]	; (80036f4 <Error_Handler+0x14>)
 80036ec:	f7fd f980 	bl	80009f0 <API_UART_SendString>
	while (1)
 80036f0:	e7fe      	b.n	80036f0 <Error_Handler+0x10>
 80036f2:	bf00      	nop
 80036f4:	08003838 	.word	0x08003838

080036f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80036f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003730 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036fe:	e003      	b.n	8003708 <LoopCopyDataInit>

08003700 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003702:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003704:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003706:	3104      	adds	r1, #4

08003708 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003708:	480b      	ldr	r0, [pc, #44]	; (8003738 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800370a:	4b0c      	ldr	r3, [pc, #48]	; (800373c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800370c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800370e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003710:	d3f6      	bcc.n	8003700 <CopyDataInit>
  ldr  r2, =_sbss
 8003712:	4a0b      	ldr	r2, [pc, #44]	; (8003740 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003714:	e002      	b.n	800371c <LoopFillZerobss>

08003716 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003716:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003718:	f842 3b04 	str.w	r3, [r2], #4

0800371c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800371e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003720:	d3f9      	bcc.n	8003716 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003722:	f7fd f9e7 	bl	8000af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003726:	f000 f811 	bl	800374c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800372a:	f7ff ff5f 	bl	80035ec <main>
  bx  lr    
 800372e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003730:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003734:	08003888 	.word	0x08003888
  ldr  r0, =_sdata
 8003738:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800373c:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8003740:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8003744:	20000188 	.word	0x20000188

08003748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003748:	e7fe      	b.n	8003748 <ADC_IRQHandler>
	...

0800374c <__libc_init_array>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	4d0d      	ldr	r5, [pc, #52]	; (8003784 <__libc_init_array+0x38>)
 8003750:	4c0d      	ldr	r4, [pc, #52]	; (8003788 <__libc_init_array+0x3c>)
 8003752:	1b64      	subs	r4, r4, r5
 8003754:	10a4      	asrs	r4, r4, #2
 8003756:	2600      	movs	r6, #0
 8003758:	42a6      	cmp	r6, r4
 800375a:	d109      	bne.n	8003770 <__libc_init_array+0x24>
 800375c:	4d0b      	ldr	r5, [pc, #44]	; (800378c <__libc_init_array+0x40>)
 800375e:	4c0c      	ldr	r4, [pc, #48]	; (8003790 <__libc_init_array+0x44>)
 8003760:	f000 f820 	bl	80037a4 <_init>
 8003764:	1b64      	subs	r4, r4, r5
 8003766:	10a4      	asrs	r4, r4, #2
 8003768:	2600      	movs	r6, #0
 800376a:	42a6      	cmp	r6, r4
 800376c:	d105      	bne.n	800377a <__libc_init_array+0x2e>
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	f855 3b04 	ldr.w	r3, [r5], #4
 8003774:	4798      	blx	r3
 8003776:	3601      	adds	r6, #1
 8003778:	e7ee      	b.n	8003758 <__libc_init_array+0xc>
 800377a:	f855 3b04 	ldr.w	r3, [r5], #4
 800377e:	4798      	blx	r3
 8003780:	3601      	adds	r6, #1
 8003782:	e7f2      	b.n	800376a <__libc_init_array+0x1e>
 8003784:	08003880 	.word	0x08003880
 8003788:	08003880 	.word	0x08003880
 800378c:	08003880 	.word	0x08003880
 8003790:	08003884 	.word	0x08003884

08003794 <memset>:
 8003794:	4402      	add	r2, r0
 8003796:	4603      	mov	r3, r0
 8003798:	4293      	cmp	r3, r2
 800379a:	d100      	bne.n	800379e <memset+0xa>
 800379c:	4770      	bx	lr
 800379e:	f803 1b01 	strb.w	r1, [r3], #1
 80037a2:	e7f9      	b.n	8003798 <memset+0x4>

080037a4 <_init>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr

080037b0 <_fini>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr
